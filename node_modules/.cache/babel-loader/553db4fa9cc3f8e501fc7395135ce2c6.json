{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWienDisplacement = exports.createWeakMixingAngle = exports.createVacuumImpedance = exports.createThomsonCrossSection = exports.createStefanBoltzmann = exports.createSpeedOfLight = exports.createSecondRadiation = exports.createSackurTetrode = exports.createRydberg = exports.createReducedPlanckConstant = exports.createQuantumOfCirculation = exports.createProtonMass = exports.createPlanckTime = exports.createPlanckTemperature = exports.createPlanckMass = exports.createPlanckLength = exports.createPlanckConstant = exports.createPlanckCharge = exports.createNuclearMagneton = exports.createNeutronMass = exports.createMolarVolume = exports.createMolarPlanckConstant = exports.createMolarMassC12 = exports.createMolarMass = exports.createMagneticFluxQuantum = exports.createMagneticConstant = exports.createLoschmidt = exports.createKlitzing = exports.createJosephson = exports.createInverseConductanceQuantum = exports.createHartreeEnergy = exports.createGravity = exports.createGravitationConstant = exports.createGasConstant = exports.createFirstRadiation = exports.createFineStructure = exports.createFermiCoupling = exports.createFaraday = exports.createElementaryCharge = exports.createElectronMass = exports.createElectricConstant = exports.createEfimovFactor = exports.createDeuteronMass = exports.createCoulomb = exports.createConductanceQuantum = exports.createClassicalElectronRadius = exports.createBoltzmann = exports.createBohrRadius = exports.createBohrMagneton = exports.createAvogadro = exports.createAtomicMass = void 0;\nvar _factory = require(\"../../utils/factory.js\");\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nvar createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexports.createSpeedOfLight = createSpeedOfLight;\nvar createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexports.createGravitationConstant = createGravitationConstant;\nvar createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexports.createPlanckConstant = createPlanckConstant;\nvar createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexports.createReducedPlanckConstant = createReducedPlanckConstant;\nvar createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexports.createMagneticConstant = createMagneticConstant;\nvar createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexports.createElectricConstant = createElectricConstant;\nvar createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexports.createVacuumImpedance = createVacuumImpedance;\nvar createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexports.createCoulomb = createCoulomb;\nvar createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexports.createElementaryCharge = createElementaryCharge;\nvar createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexports.createBohrMagneton = createBohrMagneton;\nvar createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexports.createConductanceQuantum = createConductanceQuantum;\nvar createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexports.createInverseConductanceQuantum = createInverseConductanceQuantum;\nvar createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexports.createMagneticFluxQuantum = createMagneticFluxQuantum;\nvar createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexports.createNuclearMagneton = createNuclearMagneton;\nvar createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexports.createKlitzing = createKlitzing;\nvar createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexports.createJosephson = createJosephson;\nvar createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexports.createBohrRadius = createBohrRadius;\nvar createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexports.createClassicalElectronRadius = createClassicalElectronRadius;\nvar createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexports.createElectronMass = createElectronMass;\nvar createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexports.createFermiCoupling = createFermiCoupling;\nvar createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexports.createFineStructure = createFineStructure;\nvar createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexports.createHartreeEnergy = createHartreeEnergy;\nvar createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexports.createProtonMass = createProtonMass;\nvar createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexports.createDeuteronMass = createDeuteronMass;\nvar createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexports.createNeutronMass = createNeutronMass;\nvar createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexports.createQuantumOfCirculation = createQuantumOfCirculation;\nvar createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexports.createRydberg = createRydberg;\nvar createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexports.createThomsonCrossSection = createThomsonCrossSection;\nvar createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexports.createWeakMixingAngle = createWeakMixingAngle;\nvar createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexports.createEfimovFactor = createEfimovFactor;\nvar createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexports.createAtomicMass = createAtomicMass;\nvar createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexports.createAvogadro = createAvogadro;\nvar createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexports.createBoltzmann = createBoltzmann;\nvar createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexports.createFaraday = createFaraday;\nvar createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexports.createFirstRadiation = createFirstRadiation;\nvar createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexports.createLoschmidt = createLoschmidt;\nvar createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexports.createGasConstant = createGasConstant;\nvar createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexports.createMolarPlanckConstant = createMolarPlanckConstant;\nvar createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexports.createMolarVolume = createMolarVolume;\nvar createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexports.createSackurTetrode = createSackurTetrode;\nvar createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexports.createSecondRadiation = createSecondRadiation;\nvar createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexports.createStefanBoltzmann = createStefanBoltzmann;\nvar createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexports.createWienDisplacement = createWienDisplacement;\nvar createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexports.createMolarMass = createMolarMass;\nvar createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexports.createMolarMassC12 = createMolarMassC12;\nvar createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexports.createGravity = createGravity;\nvar createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexports.createPlanckLength = createPlanckLength;\nvar createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexports.createPlanckMass = createPlanckMass;\nvar createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexports.createPlanckTime = createPlanckTime;\nvar createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexports.createPlanckCharge = createPlanckCharge;\nvar createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nexports.createPlanckTemperature = createPlanckTemperature;\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return (0, _factory.factory)(name, dependencies, function (_ref) {\n    var config = _ref.config,\n      Unit = _ref.Unit,\n      BigNumber = _ref.BigNumber;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return (0, _factory.factory)(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n      BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createWienDisplacement","createWeakMixingAngle","createVacuumImpedance","createThomsonCrossSection","createStefanBoltzmann","createSpeedOfLight","createSecondRadiation","createSackurTetrode","createRydberg","createReducedPlanckConstant","createQuantumOfCirculation","createProtonMass","createPlanckTime","createPlanckTemperature","createPlanckMass","createPlanckLength","createPlanckConstant","createPlanckCharge","createNuclearMagneton","createNeutronMass","createMolarVolume","createMolarPlanckConstant","createMolarMassC12","createMolarMass","createMagneticFluxQuantum","createMagneticConstant","createLoschmidt","createKlitzing","createJosephson","createInverseConductanceQuantum","createHartreeEnergy","createGravity","createGravitationConstant","createGasConstant","createFirstRadiation","createFineStructure","createFermiCoupling","createFaraday","createElementaryCharge","createElectronMass","createElectricConstant","createEfimovFactor","createDeuteronMass","createCoulomb","createConductanceQuantum","createClassicalElectronRadius","createBoltzmann","createBohrRadius","createBohrMagneton","createAvogadro","createAtomicMass","_factory","require","unitFactory","numberFactory","name","valueStr","unitStr","dependencies","factory","_ref","config","Unit","BigNumber","number","parseFloat","unit","fixPrefix","_ref2"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/type/unit/physicalConstants.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWienDisplacement = exports.createWeakMixingAngle = exports.createVacuumImpedance = exports.createThomsonCrossSection = exports.createStefanBoltzmann = exports.createSpeedOfLight = exports.createSecondRadiation = exports.createSackurTetrode = exports.createRydberg = exports.createReducedPlanckConstant = exports.createQuantumOfCirculation = exports.createProtonMass = exports.createPlanckTime = exports.createPlanckTemperature = exports.createPlanckMass = exports.createPlanckLength = exports.createPlanckConstant = exports.createPlanckCharge = exports.createNuclearMagneton = exports.createNeutronMass = exports.createMolarVolume = exports.createMolarPlanckConstant = exports.createMolarMassC12 = exports.createMolarMass = exports.createMagneticFluxQuantum = exports.createMagneticConstant = exports.createLoschmidt = exports.createKlitzing = exports.createJosephson = exports.createInverseConductanceQuantum = exports.createHartreeEnergy = exports.createGravity = exports.createGravitationConstant = exports.createGasConstant = exports.createFirstRadiation = exports.createFineStructure = exports.createFermiCoupling = exports.createFaraday = exports.createElementaryCharge = exports.createElectronMass = exports.createElectricConstant = exports.createEfimovFactor = exports.createDeuteronMass = exports.createCoulomb = exports.createConductanceQuantum = exports.createClassicalElectronRadius = exports.createBoltzmann = exports.createBohrRadius = exports.createBohrMagneton = exports.createAvogadro = exports.createAtomicMass = void 0;\nvar _factory = require(\"../../utils/factory.js\");\n// Source: https://en.wikipedia.org/wiki/Physical_constant\n\n// Universal constants\nvar createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexports.createSpeedOfLight = createSpeedOfLight;\nvar createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexports.createGravitationConstant = createGravitationConstant;\nvar createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexports.createPlanckConstant = createPlanckConstant;\nvar createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s');\n\n// Electromagnetic constants\nexports.createReducedPlanckConstant = createReducedPlanckConstant;\nvar createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexports.createMagneticConstant = createMagneticConstant;\nvar createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexports.createElectricConstant = createElectricConstant;\nvar createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexports.createVacuumImpedance = createVacuumImpedance;\nvar createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexports.createCoulomb = createCoulomb;\nvar createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexports.createElementaryCharge = createElementaryCharge;\nvar createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexports.createBohrMagneton = createBohrMagneton;\nvar createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexports.createConductanceQuantum = createConductanceQuantum;\nvar createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexports.createInverseConductanceQuantum = createInverseConductanceQuantum;\nvar createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexports.createMagneticFluxQuantum = createMagneticFluxQuantum;\nvar createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexports.createNuclearMagneton = createNuclearMagneton;\nvar createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexports.createKlitzing = createKlitzing;\nvar createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n\n// Atomic and nuclear constants\nexports.createJosephson = createJosephson;\nvar createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexports.createBohrRadius = createBohrRadius;\nvar createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexports.createClassicalElectronRadius = createClassicalElectronRadius;\nvar createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexports.createElectronMass = createElectronMass;\nvar createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexports.createFermiCoupling = createFermiCoupling;\nvar createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexports.createFineStructure = createFineStructure;\nvar createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexports.createHartreeEnergy = createHartreeEnergy;\nvar createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexports.createProtonMass = createProtonMass;\nvar createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexports.createDeuteronMass = createDeuteronMass;\nvar createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexports.createNeutronMass = createNeutronMass;\nvar createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexports.createQuantumOfCirculation = createQuantumOfCirculation;\nvar createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexports.createRydberg = createRydberg;\nvar createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexports.createThomsonCrossSection = createThomsonCrossSection;\nvar createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexports.createWeakMixingAngle = createWeakMixingAngle;\nvar createEfimovFactor = numberFactory('efimovFactor', 22.7);\n\n// Physico-chemical constants\nexports.createEfimovFactor = createEfimovFactor;\nvar createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexports.createAtomicMass = createAtomicMass;\nvar createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexports.createAvogadro = createAvogadro;\nvar createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexports.createBoltzmann = createBoltzmann;\nvar createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexports.createFaraday = createFaraday;\nvar createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2');\n// export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\nexports.createFirstRadiation = createFirstRadiation;\nvar createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexports.createLoschmidt = createLoschmidt;\nvar createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexports.createGasConstant = createGasConstant;\nvar createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexports.createMolarPlanckConstant = createMolarPlanckConstant;\nvar createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexports.createMolarVolume = createMolarVolume;\nvar createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexports.createSackurTetrode = createSackurTetrode;\nvar createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexports.createSecondRadiation = createSecondRadiation;\nvar createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexports.createStefanBoltzmann = createStefanBoltzmann;\nvar createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K');\n\n// Adopted values\nexports.createWienDisplacement = createWienDisplacement;\nvar createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexports.createMolarMass = createMolarMass;\nvar createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexports.createMolarMassC12 = createMolarMassC12;\nvar createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2');\n// atm is defined in Unit.js\n\n// Natural units\nexports.createGravity = createGravity;\nvar createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexports.createPlanckLength = createPlanckLength;\nvar createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexports.createPlanckMass = createPlanckMass;\nvar createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexports.createPlanckTime = createPlanckTime;\nvar createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexports.createPlanckCharge = createPlanckCharge;\nvar createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K');\n\n// helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\nexports.createPlanckTemperature = createPlanckTemperature;\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return (0, _factory.factory)(name, dependencies, function (_ref) {\n    var config = _ref.config,\n      Unit = _ref.Unit,\n      BigNumber = _ref.BigNumber;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n}\n\n// helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return (0, _factory.factory)(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n      BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}