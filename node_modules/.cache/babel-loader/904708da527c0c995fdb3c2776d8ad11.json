{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStirlingS2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nvar createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    addScalar = _ref.addScalar,\n    subtract = _ref.subtract,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    pow = _ref.pow,\n    factorial = _ref.factorial,\n    combinations = _ref.combinations,\n    isNegative = _ref.isNegative,\n    isInteger = _ref.isInteger,\n    number = _ref.number,\n    bignumber = _ref.bignumber,\n    larger = _ref.larger;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !((0, _is.isNumber)(n) && (0, _is.isNumber)(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});\nexports.createStirlingS2 = createStirlingS2;","map":{"version":3,"names":["Object","defineProperty","exports","value","createStirlingS2","_factory","require","_is","name","dependencies","factory","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","number","bignumber","larger","smallCache","bigCache","numberBigNumberNumberBigNumber","n","k","TypeError","big","isNumber","cache","make","nn","nk","length","m","row","prev","i"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/combinatorics/stirlingS2.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStirlingS2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'number', '?bignumber', 'larger'];\nvar createStirlingS2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    addScalar = _ref.addScalar,\n    subtract = _ref.subtract,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    pow = _ref.pow,\n    factorial = _ref.factorial,\n    combinations = _ref.combinations,\n    isNegative = _ref.isNegative,\n    isInteger = _ref.isInteger,\n    number = _ref.number,\n    bignumber = _ref.bignumber,\n    larger = _ref.larger;\n  var smallCache = [];\n  var bigCache = [];\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1 <= n, then s(n,k) = 1\n   *  If k = 0 < n, then s(n,k) = 0\n   *\n   * Note that if either n or k is supplied as a BigNumber, the result will be\n   * as well.\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      }\n      var big = !((0, _is.isNumber)(n) && (0, _is.isNumber)(k));\n      var cache = big ? bigCache : smallCache;\n      var make = big ? bignumber : number;\n      var nn = number(n);\n      var nk = number(k);\n      /* See if we already have the value: */\n      if (cache[nn] && cache[nn].length > nk) {\n        return cache[nn][nk];\n      }\n      /* Fill the cache */\n      for (var m = 0; m <= nn; ++m) {\n        if (!cache[m]) {\n          cache[m] = [m === 0 ? make(1) : make(0)];\n        }\n        if (m === 0) continue;\n        var row = cache[m];\n        var prev = cache[m - 1];\n        for (var i = row.length; i <= m && i <= nk; ++i) {\n          if (i === m) {\n            row[i] = 1;\n          } else {\n            row[i] = addScalar(multiplyScalar(make(i), prev[i]), prev[i - 1]);\n          }\n        }\n      }\n      return cache[nn][nk];\n    }\n  });\n});\nexports.createStirlingS2 = createStirlingS2;"],"mappings":"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"},"metadata":{},"sourceType":"script"}