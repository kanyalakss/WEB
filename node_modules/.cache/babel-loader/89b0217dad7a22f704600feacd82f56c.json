{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPow = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nvar createPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    identity = _ref.identity,\n    multiply = _ref.multiply,\n    matrix = _ref.matrix,\n    inv = _ref.inv,\n    number = _ref.number,\n    fraction = _ref.fraction,\n    Complex = _ref.Complex;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !(0, _number.isInteger)(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if ((0, _number.isInteger)(y) || x >= 0 || config.predictable) {\n      return (0, _index.powNumber)(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!(0, _number.isInteger)(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = (0, _array.arraySize)(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});\nexports.createPow = createPow;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPow","_factory","require","_number","_array","_index","name","dependencies","factory","_ref","typed","config","identity","multiply","matrix","inv","number","fraction","Complex","_pow","ComplexComplex","x","y","pow","BigNumberBigNumber","isInteger","predictable","toNumber","FractionFraction","result","Error","valueOf","_powArray","ArrayBigNumber","_powMatrix","MatrixBigNumber","UnitNumberBigNumber","yFrac","yNum","Math","abs","d","n","ex","Infinity","NaN","powNumber","TypeError","s","arraySize","length","error","message","res","px"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/pow.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPow = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'inv', 'fraction', 'number', 'Complex'];\nvar createPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    identity = _ref.identity,\n    multiply = _ref.multiply,\n    matrix = _ref.matrix,\n    inv = _ref.inv,\n    number = _ref.number,\n    fraction = _ref.fraction,\n    Complex = _ref.Complex;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   *\n   * Matrix exponentiation is supported for square matrices `x` and integers `y`:\n   * when `y` is nonnegative, `x` may be any square matrix; and when `y` is\n   * negative, `x` must be invertible, and then this function returns\n   * inv(x)^(-y).\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    math.pow(c, -1)               // returns Array [[-0.6, 0.4], [0.8, -0.2]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      var result = x.pow(y);\n      if (result != null) {\n        return result;\n      }\n      if (config.predictable) {\n        throw new Error('Result of pow is non-rational and cannot be expressed as a fraction');\n      } else {\n        return _pow(x.valueOf(), y.valueOf());\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !(0, _number.isInteger)(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {\n        // fraction() throws an error if y is Infinity, etc.\n      }\n\n      // Unable to express y as a fraction, so continue on\n    }\n\n    // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if ((0, _number.isInteger)(y) || x >= 0 || config.predictable) {\n      return (0, _index.powNumber)(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a integer value (positive if `x` is not invertible)\n   * @returns {Array}\n   * @private\n   */\n  function _powArray(x, y) {\n    if (!(0, _number.isInteger)(y)) {\n      throw new TypeError('For A^b, b must be an integer (value is ' + y + ')');\n    }\n    // verify that A is a 2 dimensional square matrix\n    var s = (0, _array.arraySize)(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    if (y < 0) {\n      try {\n        return _powArray(inv(x), -y);\n      } catch (error) {\n        if (error.message === 'Cannot calculate inverse, determinant is zero') {\n          throw new TypeError('For A^b, when A is not invertible, b must be a positive integer (value is ' + y + ')');\n        }\n        throw error;\n      }\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});\nexports.createPow = createPow;"],"mappings":"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"},"metadata":{},"sourceType":"script"}