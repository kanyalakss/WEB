{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitOr = void 0;\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createBitOr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': _index.bitOrNumber,\n    'BigNumber, BigNumber': _bitwise.bitOrBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }));\n});\nexports.createBitOr = createBitOr;","map":{"version":3,"names":["Object","defineProperty","exports","value","createBitOr","_bitwise","require","_factory","_matAlgo10xSids","_matAlgo04xSidSid","_matAlgo01xDSid","_matrixAlgorithmSuite","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","DenseMatrix","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo04xSidSid","createMatAlgo04xSidSid","matAlgo10xSids","createMatAlgo10xSids","matrixAlgorithmSuite","createMatrixAlgorithmSuite","bitOrNumber","bitOrBigNumber","SS","DS","Ss"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/bitwise/bitOr.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitOr = void 0;\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'bitOr';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createBitOr = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': _index.bitOrNumber,\n    'BigNumber, BigNumber': _bitwise.bitOrBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }));\n});\nexports.createBitOr = createBitOr;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAC1D,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIE,eAAe,GAAGF,OAAO,CAAC,2CAA2C,CAAC;AAC1E,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,6CAA6C,CAAC;AAC9E,IAAII,eAAe,GAAGJ,OAAO,CAAC,2CAA2C,CAAC;AAC1E,IAAIK,qBAAqB,GAAGL,OAAO,CAAC,iDAAiD,CAAC;AACtF,IAAIM,MAAM,GAAGN,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIO,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,aAAa,CAAC;AACpE,IAAIV,WAAW,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACQ,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACzF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,WAAW,GAAGH,IAAI,CAACG,WAAW;IAC9BC,WAAW,GAAGJ,IAAI,CAACI,WAAW;EAChC,IAAIC,cAAc,GAAG,CAAC,CAAC,EAAEX,eAAe,CAACY,oBAAoB,EAAE;IAC7DL,KAAK,EAAEA;EACT,CAAC,CAAC;EACF,IAAIM,gBAAgB,GAAG,CAAC,CAAC,EAAEd,iBAAiB,CAACe,sBAAsB,EAAE;IACnEP,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIM,cAAc,GAAG,CAAC,CAAC,EAAEjB,eAAe,CAACkB,oBAAoB,EAAE;IAC7DT,KAAK,EAAEA,KAAK;IACZG,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIO,oBAAoB,GAAG,CAAC,CAAC,EAAEhB,qBAAqB,CAACiB,0BAA0B,EAAE;IAC/EX,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,MAAM,CAACiB,WAAW;IACpC,sBAAsB,EAAExB,QAAQ,CAACyB;EACnC,CAAC,EAAEH,oBAAoB,CAAC;IACtBI,EAAE,EAAER,gBAAgB;IACpBS,EAAE,EAAEX,cAAc;IAClBY,EAAE,EAAER;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFvB,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script"}