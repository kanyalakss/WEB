{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDet = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    divideScalar = _ref.divideScalar,\n    isZero = _ref.isZero,\n    unaryMinus = _ref.unaryMinus;\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return (0, _object.clone)(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n      if ((0, _is.isMatrix)(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n      switch (size.length) {\n        case 0:\n          // scalar\n          return (0, _object.clone)(x);\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return (0, _object.clone)(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return (0, _object.clone)(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Bareiss algorithm\n      // this algorithm have same complexity as LUP decomposition (O(n^3))\n      // but it preserve precision of floating point more relative to the LUP decomposition\n      var negated = false;\n      var rowIndices = new Array(rows).fill(0).map(function (_, i) {\n        return i;\n      }); // matrix index of row i\n      for (var k = 0; k < rows; k++) {\n        var k_ = rowIndices[k];\n        if (isZero(matrix[k_][k])) {\n          var _k = void 0;\n          for (_k = k + 1; _k < rows; _k++) {\n            if (!isZero(matrix[rowIndices[_k]][k])) {\n              k_ = rowIndices[_k];\n              rowIndices[_k] = rowIndices[k];\n              rowIndices[k] = k_;\n              negated = !negated;\n              break;\n            }\n          }\n          if (_k === rows) return matrix[k_][k]; // some zero of the type\n        }\n\n        var piv = matrix[k_][k];\n        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];\n        for (var i = k + 1; i < rows; i++) {\n          var i_ = rowIndices[i];\n          for (var j = k + 1; j < rows; j++) {\n            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);\n          }\n        }\n      }\n      var det = matrix[rowIndices[rows - 1]][rows - 1];\n      return negated ? unaryMinus(det) : det;\n    }\n  }\n});\nexports.createDet = createDet;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDet","_is","require","_object","_string","_factory","name","dependencies","factory","_ref","typed","matrix","subtract","multiply","divideScalar","isZero","unaryMinus","any","x","clone","det","size","isMatrix","Array","isArray","length","valueOf","RangeError","format","rows","cols","_det","negated","rowIndices","fill","map","_","i","k","k_","_k","piv","piv_","i_","j"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/det.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDet = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'det';\nvar dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'divideScalar', 'isZero', 'unaryMinus'];\nvar createDet = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    divideScalar = _ref.divideScalar,\n    isZero = _ref.isZero,\n    unaryMinus = _ref.unaryMinus;\n  /**\n   * Calculate the determinant of a matrix.\n   *\n   * Syntax:\n   *\n   *    math.det(x)\n   *\n   * Examples:\n   *\n   *    math.det([[1, 2], [3, 4]]) // returns -2\n   *\n   *    const A = [\n   *      [-2, 2, 3],\n   *      [-1, 1, 3],\n   *      [2, 0, -1]\n   *    ]\n   *    math.det(A) // returns 6\n   *\n   * See also:\n   *\n   *    inv\n   *\n   * @param {Array | Matrix} x  A matrix\n   * @return {number} The determinant of `x`\n   */\n  return typed(name, {\n    any: function any(x) {\n      return (0, _object.clone)(x);\n    },\n    'Array | Matrix': function det(x) {\n      var size;\n      if ((0, _is.isMatrix)(x)) {\n        size = x.size();\n      } else if (Array.isArray(x)) {\n        x = matrix(x);\n        size = x.size();\n      } else {\n        // a scalar\n        size = [];\n      }\n      switch (size.length) {\n        case 0:\n          // scalar\n          return (0, _object.clone)(x);\n        case 1:\n          // vector\n          if (size[0] === 1) {\n            return (0, _object.clone)(x.valueOf()[0]);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n        case 2:\n          {\n            // two dimensional array\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _det(x.clone().valueOf(), rows, cols);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n\n  /**\n   * Calculate the determinant of a matrix\n   * @param {Array[]} matrix  A square, two dimensional matrix\n   * @param {number} rows     Number of rows of the matrix (zero-based)\n   * @param {number} cols     Number of columns of the matrix (zero-based)\n   * @returns {number} det\n   * @private\n   */\n  function _det(matrix, rows, cols) {\n    if (rows === 1) {\n      // this is a 1 x 1 matrix\n      return (0, _object.clone)(matrix[0][0]);\n    } else if (rows === 2) {\n      // this is a 2 x 2 matrix\n      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12\n      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));\n    } else {\n      // Bareiss algorithm\n      // this algorithm have same complexity as LUP decomposition (O(n^3))\n      // but it preserve precision of floating point more relative to the LUP decomposition\n      var negated = false;\n      var rowIndices = new Array(rows).fill(0).map(function (_, i) {\n        return i;\n      }); // matrix index of row i\n      for (var k = 0; k < rows; k++) {\n        var k_ = rowIndices[k];\n        if (isZero(matrix[k_][k])) {\n          var _k = void 0;\n          for (_k = k + 1; _k < rows; _k++) {\n            if (!isZero(matrix[rowIndices[_k]][k])) {\n              k_ = rowIndices[_k];\n              rowIndices[_k] = rowIndices[k];\n              rowIndices[k] = k_;\n              negated = !negated;\n              break;\n            }\n          }\n          if (_k === rows) return matrix[k_][k]; // some zero of the type\n        }\n\n        var piv = matrix[k_][k];\n        var piv_ = k === 0 ? 1 : matrix[rowIndices[k - 1]][k - 1];\n        for (var i = k + 1; i < rows; i++) {\n          var i_ = rowIndices[i];\n          for (var j = k + 1; j < rows; j++) {\n            matrix[i_][j] = divideScalar(subtract(multiply(matrix[i_][j], piv), multiply(matrix[i_][k], matrix[k_][j])), piv_);\n          }\n        }\n      }\n      var det = matrix[rowIndices[rows - 1]][rows - 1];\n      return negated ? unaryMinus(det) : det;\n    }\n  }\n});\nexports.createDet = createDet;"],"mappings":"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"},"metadata":{},"sourceType":"script"}