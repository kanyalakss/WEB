{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDotPow = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo07xSSf = require(\"../../type/matrix/utils/matAlgo07xSSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\nvar createDotPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    equalScalar = _ref.equalScalar,\n    matrix = _ref.matrix,\n    pow = _ref.pow,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo07xSSf = (0, _matAlgo07xSSf.createMatAlgo07xSSf)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var powScalarSignatures = {};\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n  var powScalar = typed(powScalarSignatures);\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createDotPow = createDotPow;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDotPow","_factory","require","_matAlgo03xDSf","_matAlgo07xSSf","_matAlgo11xS0s","_matAlgo12xSfs","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","equalScalar","matrix","pow","DenseMatrix","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo07xSSf","createMatAlgo07xSSf","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","powScalarSignatures","signature","signatures","prototype","hasOwnProperty","call","includes","powScalar","elop","SS","DS","Ss","sS"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/dotPow.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDotPow = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo07xSSf = require(\"../../type/matrix/utils/matAlgo07xSSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];\nvar createDotPow = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    equalScalar = _ref.equalScalar,\n    matrix = _ref.matrix,\n    pow = _ref.pow,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo07xSSf = (0, _matAlgo07xSSf.createMatAlgo07xSSf)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var powScalarSignatures = {};\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n  var powScalar = typed(powScalarSignatures);\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createDotPow = createDotPow;"],"mappings":"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"},"metadata":{},"sourceType":"script"}