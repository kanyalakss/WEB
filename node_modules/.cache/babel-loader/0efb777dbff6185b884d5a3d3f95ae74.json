{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRightLogShift = void 0;\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo08xS0Sid = require(\"../../type/matrix/utils/matAlgo08xS0Sid.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar _useMatrixForArrayScalar = require(\"./useMatrixForArrayScalar.js\");\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nvar createRightLogShift = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    zeros = _ref.zeros,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo08xS0Sid = (0, _matAlgo08xS0Sid.createMatAlgo08xS0Sid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var useMatrixForArrayScalar = (0, _useMatrixForArrayScalar.createUseMatrixForArrayScalar)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': _index.rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo10xSids(y, x, self, true);\n      };\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo14xDs(y, x, self, true);\n      };\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});\nexports.createRightLogShift = createRightLogShift;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRightLogShift","_matAlgo02xDS","require","_matAlgo11xS0s","_matAlgo14xDs","_matAlgo01xDSid","_matAlgo10xSids","_matAlgo08xS0Sid","_factory","_matrixAlgorithmSuite","_index","_useMatrixForArrayScalar","name","dependencies","factory","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo08xS0Sid","createMatAlgo08xS0Sid","matAlgo10xSids","createMatAlgo10xSids","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo14xDs","createMatAlgo14xDs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","useMatrixForArrayScalar","createUseMatrixForArrayScalar","rightLogShiftNumber","referToSelf","self","x","y","clone","size","storage","SS","DS","SD"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/bitwise/rightLogShift.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRightLogShift = void 0;\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo08xS0Sid = require(\"../../type/matrix/utils/matAlgo08xS0Sid.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar _useMatrixForArrayScalar = require(\"./useMatrixForArrayScalar.js\");\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nvar createRightLogShift = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    zeros = _ref.zeros,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo08xS0Sid = (0, _matAlgo08xS0Sid.createMatAlgo08xS0Sid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var useMatrixForArrayScalar = (0, _useMatrixForArrayScalar.createUseMatrixForArrayScalar)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, 32, 64], 4)    // returns Array [1, 2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': _index.rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(y, 0)) {\n          return x.clone();\n        }\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo10xSids(y, x, self, true);\n      };\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (equalScalar(x, 0)) {\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo14xDs(y, x, self, true);\n      };\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});\nexports.createRightLogShift = createRightLogShift;"],"mappings":"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"},"metadata":{},"sourceType":"script"}