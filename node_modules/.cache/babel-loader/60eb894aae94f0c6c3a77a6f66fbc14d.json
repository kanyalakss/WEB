{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCumSum = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _switch2 = require(\"../../utils/switch.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _IndexError = require(\"../../error/IndexError.js\");\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nvar createCumSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    unaryPlus = _ref.unaryPlus;\n  /**\n   * Compute the cumulative sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the cumulative sums\n   * along a specified dimension (defaulting to the first) will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.cumsum(a, b, c, ...)\n   *     math.cumsum(A)\n   *\n   * Examples:\n   *\n   *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]\n   *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]\n   *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]\n   *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, sum\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The cumulative sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    Array: _cumsum,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_cumsum(matrix.valueOf()));\n    },\n    // sum([a, b, c, d, ...], dim)\n    'Array, number | BigNumber': _ncumSumDim,\n    'Matrix, number | BigNumber': function MatrixNumberBigNumber(matrix, dim) {\n      return matrix.create(_ncumSumDim(matrix.valueOf(), dim));\n    },\n    // cumsum(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('All values expected to be scalar in function cumsum');\n      }\n      return _cumsum(args);\n    }\n  });\n\n  /**\n     * Recursively calculate the cumulative sum of an n-dimensional array\n     * @param {Array} array\n     * @return {number} cumsum\n     * @private\n     */\n  function _cumsum(array) {\n    try {\n      return _cumsummap(array);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, name);\n    }\n  }\n  function _cumsummap(array) {\n    if (array.length === 0) {\n      return [];\n    }\n    var sums = [unaryPlus(array[0])]; // unaryPlus converts to number if need be\n    for (var i = 1; i < array.length; ++i) {\n      // Must use add below and not addScalar for the case of summing a\n      // 2+-dimensional array along the 0th dimension (the row vectors,\n      // or higher-d analogues, are literally added to each other).\n      sums.push(add(sums[i - 1], array[i]));\n    }\n    return sums;\n  }\n  function _ncumSumDim(array, dim) {\n    var size = (0, _array.arraySize)(array);\n    if (dim < 0 || dim >= size.length) {\n      // TODO: would be more clear when throwing a DimensionError here\n      throw new _IndexError.IndexError(dim, size.length);\n    }\n    try {\n      return _cumsumDimensional(array, dim);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, name);\n    }\n  }\n\n  /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */\n  function _cumsumDimensional(mat, dim) {\n    var i, ret, tran;\n    if (dim <= 0) {\n      var initialValue = mat[0][0];\n      if (!Array.isArray(initialValue)) {\n        return _cumsummap(mat);\n      } else {\n        tran = (0, _switch2._switch)(mat);\n        ret = [];\n        for (i = 0; i < tran.length; i++) {\n          ret[i] = _cumsumDimensional(tran[i], dim - 1);\n        }\n        return ret;\n      }\n    } else {\n      ret = [];\n      for (i = 0; i < mat.length; i++) {\n        ret[i] = _cumsumDimensional(mat[i], dim - 1);\n      }\n      return ret;\n    }\n  }\n});\nexports.createCumSum = createCumSum;","map":{"version":3,"names":["Object","defineProperty","exports","value","createCumSum","_collection","require","_factory","_switch2","_improveErrorMessage","_array","_IndexError","name","dependencies","factory","_ref","typed","add","unaryPlus","Array","_cumsum","Matrix","matrix","create","valueOf","_ncumSumDim","MatrixNumberBigNumber","dim","_","args","containsCollections","TypeError","array","_cumsummap","err","improveErrorMessage","length","sums","i","push","size","arraySize","IndexError","_cumsumDimensional","mat","ret","tran","initialValue","isArray","_switch"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/statistics/cumsum.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCumSum = void 0;\nvar _collection = require(\"../../utils/collection.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _switch2 = require(\"../../utils/switch.js\");\nvar _improveErrorMessage = require(\"./utils/improveErrorMessage.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _IndexError = require(\"../../error/IndexError.js\");\nvar name = 'cumsum';\nvar dependencies = ['typed', 'add', 'unaryPlus'];\nvar createCumSum = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    unaryPlus = _ref.unaryPlus;\n  /**\n   * Compute the cumulative sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the cumulative sums\n   * along a specified dimension (defaulting to the first) will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.cumsum(a, b, c, ...)\n   *     math.cumsum(A)\n   *\n   * Examples:\n   *\n   *     math.cumsum(2, 1, 4, 3)               // returns [2, 3, 7, 10]\n   *     math.cumsum([2, 1, 4, 3])             // returns [2, 3, 7, 10]\n   *     math.cumsum([[1, 2], [3, 4]])         // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 0)      // returns [[1, 2], [4, 6]]\n   *     math.cumsum([[1, 2], [3, 4]], 1)      // returns [[1, 3], [3, 7]]\n   *     math.cumsum([[2, 5], [4, 3], [1, 7]]) // returns [[2, 5], [6, 8], [7, 15]]\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance, sum\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The cumulative sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    Array: _cumsum,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_cumsum(matrix.valueOf()));\n    },\n    // sum([a, b, c, d, ...], dim)\n    'Array, number | BigNumber': _ncumSumDim,\n    'Matrix, number | BigNumber': function MatrixNumberBigNumber(matrix, dim) {\n      return matrix.create(_ncumSumDim(matrix.valueOf(), dim));\n    },\n    // cumsum(a, b, c, d, ...)\n    '...': function _(args) {\n      if ((0, _collection.containsCollections)(args)) {\n        throw new TypeError('All values expected to be scalar in function cumsum');\n      }\n      return _cumsum(args);\n    }\n  });\n\n  /**\n     * Recursively calculate the cumulative sum of an n-dimensional array\n     * @param {Array} array\n     * @return {number} cumsum\n     * @private\n     */\n  function _cumsum(array) {\n    try {\n      return _cumsummap(array);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, name);\n    }\n  }\n  function _cumsummap(array) {\n    if (array.length === 0) {\n      return [];\n    }\n    var sums = [unaryPlus(array[0])]; // unaryPlus converts to number if need be\n    for (var i = 1; i < array.length; ++i) {\n      // Must use add below and not addScalar for the case of summing a\n      // 2+-dimensional array along the 0th dimension (the row vectors,\n      // or higher-d analogues, are literally added to each other).\n      sums.push(add(sums[i - 1], array[i]));\n    }\n    return sums;\n  }\n  function _ncumSumDim(array, dim) {\n    var size = (0, _array.arraySize)(array);\n    if (dim < 0 || dim >= size.length) {\n      // TODO: would be more clear when throwing a DimensionError here\n      throw new _IndexError.IndexError(dim, size.length);\n    }\n    try {\n      return _cumsumDimensional(array, dim);\n    } catch (err) {\n      throw (0, _improveErrorMessage.improveErrorMessage)(err, name);\n    }\n  }\n\n  /* Possible TODO: Refactor _reduce in collection.js to be able to work here as well */\n  function _cumsumDimensional(mat, dim) {\n    var i, ret, tran;\n    if (dim <= 0) {\n      var initialValue = mat[0][0];\n      if (!Array.isArray(initialValue)) {\n        return _cumsummap(mat);\n      } else {\n        tran = (0, _switch2._switch)(mat);\n        ret = [];\n        for (i = 0; i < tran.length; i++) {\n          ret[i] = _cumsumDimensional(tran[i], dim - 1);\n        }\n        return ret;\n      }\n    } else {\n      ret = [];\n      for (i = 0; i < mat.length; i++) {\n        ret[i] = _cumsumDimensional(mat[i], dim - 1);\n      }\n      return ret;\n    }\n  }\n});\nexports.createCumSum = createCumSum;"],"mappings":"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"},"metadata":{},"sourceType":"script"}