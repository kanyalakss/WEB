{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTan = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _trigUnit = require(\"./trigUnit.js\");\nvar name = 'tan';\nvar dependencies = ['typed'];\nvar createTan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  var trigUnit = (0, _trigUnit.createTrigUnit)({\n    typed: typed\n  });\n\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * To avoid confusion with the matrix tangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Tangent of x\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': function ComplexBigNumber(x) {\n      return x.tan();\n    }\n  }, trigUnit);\n});\nexports.createTan = createTan;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTan","_factory","require","_trigUnit","name","dependencies","factory","_ref","typed","trigUnit","createTrigUnit","number","Math","tan","ComplexBigNumber","x"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/trigonometry/tan.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTan = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _trigUnit = require(\"./trigUnit.js\");\nvar name = 'tan';\nvar dependencies = ['typed'];\nvar createTan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  var trigUnit = (0, _trigUnit.createTrigUnit)({\n    typed: typed\n  });\n\n  /**\n   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.\n   *\n   * To avoid confusion with the matrix tangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.tan(x)\n   *\n   * Examples:\n   *\n   *    math.tan(0.5)                    // returns number 0.5463024898437905\n   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905\n   *    math.tan(math.pi / 4)            // returns number 1\n   *    math.tan(math.unit(45, 'deg'))   // returns number 1\n   *\n   * See also:\n   *\n   *    atan, sin, cos\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Tangent of x\n   */\n  return typed(name, {\n    number: Math.tan,\n    'Complex | BigNumber': function ComplexBigNumber(x) {\n      return x.tan();\n    }\n  }, trigUnit);\n});\nexports.createTan = createTan;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;AACxC,IAAIE,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,SAAS,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACvF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,QAAQ,GAAG,CAAC,CAAC,EAAEN,SAAS,CAACO,cAAc,EAAE;IAC3CF,KAAK,EAAEA;EACT,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAEC,IAAI,CAACC,GAAG;IAChB,qBAAqB,EAAE,SAASC,gBAAgB,CAACC,CAAC,EAAE;MAClD,OAAOA,CAAC,CAACF,GAAG,EAAE;IAChB;EACF,CAAC,EAAEJ,QAAQ,CAAC;AACd,CAAC,CAAC;AACFX,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script"}