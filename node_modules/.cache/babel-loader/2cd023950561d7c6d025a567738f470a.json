{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumeric = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _noop = require(\"../../utils/noop.js\");\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nvar createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n    bignumber = _ref.bignumber,\n    fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : _noop.noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : _noop.noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = (0, _is.typeOf)(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});\nexports.createNumeric = createNumeric;","map":{"version":3,"names":["Object","defineProperty","exports","value","createNumeric","_is","require","_factory","_noop","name","dependencies","factory","_ref","_number","number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","noBignumber","noFraction","numeric","outputType","arguments","length","undefined","check","SyntaxError","inputType","typeOf","TypeError","keys","join"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/utils/numeric.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumeric = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _noop = require(\"../../utils/noop.js\");\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nvar createNumeric = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n    bignumber = _ref.bignumber,\n    fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : _noop.noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : _noop.noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = (0, _is.typeOf)(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});\nexports.createNumeric = createNumeric;"],"mappings":"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"},"metadata":{},"sourceType":"script"}