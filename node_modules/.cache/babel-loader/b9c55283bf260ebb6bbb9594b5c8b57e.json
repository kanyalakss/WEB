{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcsc = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nvar createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    Complex = _ref.Complex,\n    _BigNumber = _ref.BigNumber;\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * To avoid confusion with the matrix arccosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(2)             // returns 0.5235987755982989\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return (0, _index.acscNumber)(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});\nexports.createAcsc = createAcsc;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAcsc","_factory","require","_index","name","dependencies","factory","_ref","typed","config","Complex","_BigNumber","BigNumber","number","x","predictable","acscNumber","acsc","div","asin"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/trigonometry/acsc.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAcsc = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'acsc';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nvar createAcsc = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    Complex = _ref.Complex,\n    _BigNumber = _ref.BigNumber;\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * To avoid confusion with the matrix arccosecant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(2)             // returns 0.5235987755982989\n   *    math.acsc(0.5)           // returns Complex 1.5707963267948966 -1.3169578969248166i\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc cosecant of x\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return (0, _index.acscNumber)(x);\n      }\n      return new Complex(x, 0).acsc();\n    },\n    Complex: function Complex(x) {\n      return x.acsc();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).asin();\n    }\n  });\n});\nexports.createAcsc = createAcsc;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,MAAM,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIE,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC;AAC9D,IAAIL,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,OAAO,GAAGH,IAAI,CAACG,OAAO;IACtBC,UAAU,GAAGJ,IAAI,CAACK,SAAS;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjBS,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,CAAC,IAAIA,CAAC,IAAI,CAAC,IAAIL,MAAM,CAACM,WAAW,EAAE;QAC3C,OAAO,CAAC,CAAC,EAAEZ,MAAM,CAACa,UAAU,EAAEF,CAAC,CAAC;MAClC;MACA,OAAO,IAAIJ,OAAO,CAACI,CAAC,EAAE,CAAC,CAAC,CAACG,IAAI,EAAE;IACjC,CAAC;IACDP,OAAO,EAAE,SAASA,OAAO,CAACI,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACG,IAAI,EAAE;IACjB,CAAC;IACDL,SAAS,EAAE,SAASA,SAAS,CAACE,CAAC,EAAE;MAC/B,OAAO,IAAIH,UAAU,CAAC,CAAC,CAAC,CAACO,GAAG,CAACJ,CAAC,CAAC,CAACK,IAAI,EAAE;IACxC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFrB,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script"}