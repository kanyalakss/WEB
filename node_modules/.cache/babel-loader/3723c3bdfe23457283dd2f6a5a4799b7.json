{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubset = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _DimensionError = require(\"../../error/DimensionError.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nvar createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]] and e = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nexports.createSubset = createSubset;\nfunction _getSubstring(str, index) {\n  if (!(0, _is.isIndex)(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0], strLen);\n  (0, _array.validateIndex)(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0]);\n  (0, _array.validateIndex)(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return (0, _customs.getSafeProperty)(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = (0, _object.clone)(object);\n  (0, _customs.setSafeProperty)(updated, key, replacement);\n  return updated;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSubset","_is","require","_object","_array","_customs","_DimensionError","_factory","name","dependencies","factory","_ref","typed","matrix","ArrayIndex","index","m","subset","isScalar","valueOf","MatrixIndex","_getObjectProperty","_getSubstring","ArrayIndexAny","replacement","clone","undefined","ArrayIndexAnyAny","defaultValue","MatrixIndexAny","MatrixIndexAnyAny","_setSubstring","_setObjectProperty","str","isIndex","TypeError","size","length","DimensionError","strLen","validateIndex","min","max","range","dimension","substr","forEach","v","charAt","len","chars","i","_i","_len","join","object","key","getSafeProperty","updated","setSafeProperty"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/subset.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubset = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _DimensionError = require(\"../../error/DimensionError.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nvar createSubset = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]] and e = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1,2,3],[4,5,6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nexports.createSubset = createSubset;\nfunction _getSubstring(str, index) {\n  if (!(0, _is.isIndex)(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0], strLen);\n  (0, _array.validateIndex)(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  (0, _array.validateIndex)(index.min()[0]);\n  (0, _array.validateIndex)(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return (0, _customs.getSafeProperty)(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new _DimensionError.DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = (0, _object.clone)(object);\n  (0, _customs.setSafeProperty)(updated, key, replacement);\n  return updated;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}