{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGcd = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nvar createGcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': _index.gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});\nexports.createGcd = createGcd;","map":{"version":3,"names":["Object","defineProperty","exports","value","createGcd","_factory","require","_matAlgo01xDSid","_matAlgo04xSidSid","_matAlgo10xSids","_matrixAlgorithmSuite","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo04xSidSid","createMatAlgo04xSidSid","matAlgo10xSids","createMatAlgo10xSids","matrixAlgorithmSuite","createMatrixAlgorithmSuite","gcdTypes","gcdManySignature","concat","referToSelf","self","a","b","args","res","i","length","gcdNumber","_gcdBigNumber","FractionFraction","x","y","gcd","SS","DS","Ss","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/gcd.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGcd = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nvar createGcd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': _index.gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});\nexports.createGcd = createGcd;"],"mappings":"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"},"metadata":{},"sourceType":"script"}