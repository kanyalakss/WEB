{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLcm = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nvar createLcm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  });\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  return typed(name, {\n    'number, number': _index.lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});\nexports.createLcm = createLcm;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLcm","_factory","require","_matAlgo02xDS","_matAlgo06xS0S","_matAlgo11xS0s","_matrixAlgorithmSuite","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo06xS0S0","createMatAlgo06xS0S0","matAlgo11xS0s","createMatAlgo11xS0s","matrixAlgorithmSuite","createMatrixAlgorithmSuite","lcmTypes","lcmManySignature","concat","referToSelf","self","a","b","args","res","i","length","lcmNumber","_lcmBigNumber","FractionFraction","x","y","lcm","SS","DS","Ss","isInt","Error","isZero","prod","times","t","mod","div","abs"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/lcm.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLcm = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nvar createLcm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    };\n  });\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  return typed(name, {\n    'number, number': _index.lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});\nexports.createLcm = createLcm;"],"mappings":"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"},"metadata":{},"sourceType":"script"}