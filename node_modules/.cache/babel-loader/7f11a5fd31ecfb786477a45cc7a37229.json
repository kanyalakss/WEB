{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPermutations = void 0;\nvar _number = require(\"../../utils/number.js\");\nvar _product = require(\"../../utils/product.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nvar createPermutations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    factorial = _ref.factorial;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return (0, _product.product)(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nexports.createPermutations = createPermutations;\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createPermutations","_number","require","_product","_factory","name","dependencies","factory","_ref","typed","factorial","numberNumber","n","k","isInteger","TypeError","product","BigNumberBigNumber","result","i","isPositiveInteger","gt","one","mul","add","minus","plus","lte","times","gte"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/probability/permutations.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPermutations = void 0;\nvar _number = require(\"../../utils/number.js\");\nvar _product = require(\"../../utils/product.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nvar createPermutations = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    factorial = _ref.factorial;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!(0, _number.isInteger)(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (!(0, _number.isInteger)(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      // Permute n objects, k at a time\n      return (0, _product.product)(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n      var one = n.mul(0).add(1);\n      result = one;\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n      return result;\n    }\n\n    // TODO: implement support for collection in permutations\n  });\n});\n\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\nexports.createPermutations = createPermutations;\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}