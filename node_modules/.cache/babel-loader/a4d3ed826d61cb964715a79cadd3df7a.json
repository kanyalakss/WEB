{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAdd = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\nvar createAdd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix,\n    SparseMatrix = _ref.SparseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(function (self) {\n      return function (x, y, rest) {\n        var result = self(x, y);\n        for (var i = 0; i < rest.length; i++) {\n          result = self(result, rest[i]);\n        }\n        return result;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});\nexports.createAdd = createAdd;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAdd","_factory","require","_matAlgo01xDSid","_matAlgo04xSidSid","_matAlgo10xSids","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","addScalar","equalScalar","DenseMatrix","SparseMatrix","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo04xSidSid","createMatAlgo04xSidSid","matAlgo10xSids","createMatAlgo10xSids","matrixAlgorithmSuite","createMatrixAlgorithmSuite","referToSelf","self","x","y","rest","result","i","length","elop","DS","SS","Ss"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/add.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAdd = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo04xSidSid = require(\"../../type/matrix/utils/matAlgo04xSidSid.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];\nvar createAdd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix,\n    SparseMatrix = _ref.SparseMatrix;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo04xSidSid = (0, _matAlgo04xSidSid.createMatAlgo04xSidSid)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Add two or more values, `x + y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.add(x, y)\n   *    math.add(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.add(2, 3)               // returns number 5\n   *    math.add(2, 3, 4)            // returns number 9\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(-4, 1)\n   *    math.add(a, b)               // returns Complex -2 + 4i\n   *\n   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   *    const c = math.unit('5 cm')\n   *    const d = math.unit('2.1 mm')\n   *    math.add(c, d)               // returns Unit 52.1 mm\n   *\n   *    math.add(\"2.3\", \"4\")         // returns number 6.3\n   *\n   * See also:\n   *\n   *    subtract, sum\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n   */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(function (self) {\n      return function (x, y, rest) {\n        var result = self(x, y);\n        for (var i = 0; i < rest.length; i++) {\n          result = self(result, rest[i]);\n        }\n        return result;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});\nexports.createAdd = createAdd;"],"mappings":"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"},"metadata":{},"sourceType":"script"}