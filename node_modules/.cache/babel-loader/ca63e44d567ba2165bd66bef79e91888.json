{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChainClass = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nvar createChainClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var on = _ref.on,\n    math = _ref.math,\n    typed = _ref.typed;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if ((0, _is.isChain)(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return (0, _string.format)(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    (0, _object.lazy)(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if ((0, _object.hasOwnProperty)(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, function () {\n            return arg0[_name];\n          });\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});\nexports.createChainClass = createChainClass;","map":{"version":3,"names":["Object","defineProperty","exports","value","createChainClass","_is","require","_string","_object","_factory","name","dependencies","factory","_ref","on","math","typed","Chain","SyntaxError","isChain","prototype","type","done","valueOf","toString","format","toJSON","mathjs","fromJSON","json","createProxy","fn","chainify","createLazyProxy","resolver","lazy","outerResolver","undefined","arguments","length","args","i","isTypedFunction","sigObject","resolve","params","Error","implementation","apply","arg0","arg1","_loop","_name","hasOwnProperty","excludedNames","expression","docs","classes","error","path","isClass"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/type/chain/Chain.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChainClass = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nvar createChainClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var on = _ref.on,\n    math = _ref.math,\n    typed = _ref.typed;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if ((0, _is.isChain)(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return (0, _string.format)(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    (0, _object.lazy)(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if ((0, _object.hasOwnProperty)(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, function () {\n            return arg0[_name];\n          });\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});\nexports.createChainClass = createChainClass;"],"mappings":"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"},"metadata":{},"sourceType":"script"}