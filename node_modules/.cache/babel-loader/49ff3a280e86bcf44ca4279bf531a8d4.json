{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrtm = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nvar createSqrtm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    add = _ref.add,\n    multiply = _ref.multiply,\n    map = _ref.map,\n    sqrt = _ref.sqrt,\n    subtract = _ref.subtract,\n    inv = _ref.inv,\n    size = _ref.size,\n    max = _ref.max,\n    identity = _ref.identity;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n});\nexports.createSqrtm = createSqrtm;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSqrtm","_is","require","_string","_array","_factory","name","dependencies","factory","_ref","typed","abs","add","multiply","map","sqrt","subtract","inv","size","max","identity","_maxIterations","_tolerance","_denmanBeavers","A","error","iterations","Y","Z","Yk","Error","ArrayMatrix","isMatrix","arraySize","length","RangeError","format","rows","cols"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/sqrtm.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrtm = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'sqrtm';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'map', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];\nvar createSqrtm = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    add = _ref.add,\n    multiply = _ref.multiply,\n    map = _ref.map,\n    sqrt = _ref.sqrt,\n    subtract = _ref.subtract,\n    inv = _ref.inv,\n    size = _ref.size,\n    max = _ref.max,\n    identity = _ref.identity;\n  var _maxIterations = 1e3;\n  var _tolerance = 1e-6;\n\n  /**\n   * Calculate the principal square root matrix using the Denman–Beavers iterative method\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   * @private\n   */\n  function _denmanBeavers(A) {\n    var error;\n    var iterations = 0;\n    var Y = A;\n    var Z = identity(size(A));\n    do {\n      var Yk = Y;\n      Y = multiply(0.5, add(Yk, inv(Z)));\n      Z = multiply(0.5, add(Z, inv(Yk)));\n      error = max(abs(subtract(Y, Yk)));\n      if (error > _tolerance && ++iterations > _maxIterations) {\n        throw new Error('computing square root of matrix: iterative method could not converge');\n      }\n    } while (error > _tolerance);\n    return Y;\n  }\n\n  /**\n   * Calculate the principal square root of a square matrix.\n   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.\n   *\n   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix\n   *\n   * Syntax:\n   *\n   *     X = math.sqrtm(A)\n   *\n   * Examples:\n   *\n   *     math.sqrtm([[33, 24], [48, 57]]) // returns [[5, 2], [4, 7]]\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param  {Array | Matrix} A   The square matrix `A`\n   * @return {Array | Matrix}     The principal square root of matrix `A`\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(A) {\n      var size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);\n      switch (size.length) {\n        case 1:\n          // Single element Array | Matrix\n          if (size[0] === 1) {\n            return map(A, sqrt);\n          } else {\n            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n          }\n        case 2:\n          {\n            // Two-dimensional Array | Matrix\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              return _denmanBeavers(A);\n            } else {\n              throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');\n            }\n          }\n        default:\n          // Multi dimensional array\n          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    }\n  });\n});\nexports.createSqrtm = createSqrtm;"],"mappings":"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"},"metadata":{},"sourceType":"script"}