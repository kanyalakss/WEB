{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _is = require(\"../../utils/is.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _access = require(\"./utils/access.js\");\nvar _assign = require(\"./utils/assign.js\");\nvar _operators = require(\"../operators.js\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    matrix = _ref.matrix,\n    Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis, implicit);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  var AssignmentNode = /*#__PURE__*/function (_Node) {\n    (0, _inherits2[\"default\"])(AssignmentNode, _Node);\n    var _super = _createSuper(AssignmentNode);\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    function AssignmentNode(object, index, value) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, AssignmentNode);\n      _this = _super.call(this);\n      _this.object = object;\n      _this.index = value ? index : null;\n      _this.value = value || index;\n\n      // validate input\n      if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (_this.index && !(0, _is.isIndexNode)(_this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!(0, _is.isNode)(_this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n      return _this;\n    }\n\n    // class name for typing purposes:\n    (0, _createClass2[\"default\"])(AssignmentNode, [{\n      key: \"name\",\n      get:\n      // readonly property name\n      function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n        var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n        var evalValue = this.value._compile(math, argNames);\n        var name = this.object.name;\n        if (!this.index) {\n          // apply a variable to the scope, for example `a=2`\n          if (!(0, _is.isSymbolNode)(this.object)) {\n            throw new TypeError('SymbolNode expected as object');\n          }\n          return function evalAssignmentNode(scope, args, context) {\n            var value = evalValue(scope, args, context);\n            scope.set(name, value);\n            return value;\n          };\n        } else if (this.index.isObjectProperty()) {\n          // apply an object property for example `a.b=2`\n          var prop = this.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            (0, _customs.setSafeProperty)(object, prop, value);\n            return value;\n          };\n        } else if ((0, _is.isSymbolNode)(this.object)) {\n          // update a matrix subset, for example `a[2]=3`\n          return function evalAssignmentNode(scope, args, context) {\n            var childObject = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            // Important:  we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            scope.set(name, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // isAccessorNode(node.object) === true\n          // update a matrix subset, for example `a.b[2]=3`\n\n          // we will not use the compile function of the AccessorNode, but\n          // compile it ourselves here as we need the parent object of the\n          // AccessorNode:\n          // wee need to apply the updated object to parent object\n          var evalParentObject = this.object.object._compile(math, argNames);\n          if (this.object.index.isObjectProperty()) {\n            var parentProp = this.object.index.getObjectProperty();\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n              // Important: we pass childObject instead of context:\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n              return value;\n            };\n          } else {\n            // if some parameters use the 'end' parameter, we need to calculate\n            // the size\n            var evalParentIndex = this.object.index._compile(math, argNames);\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              // Important: we pass parent instead of context:\n              var parentIndex = evalParentIndex(scope, args, parent);\n              var childObject = access(parent, parentIndex);\n              // Important:  we pass childObject instead of context\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              assign(parent, parentIndex, assign(childObject, index, value));\n              return value;\n            };\n          }\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        if (this.index) {\n          callback(this.index, 'index', this);\n        }\n        callback(this.value, 'value', this);\n      }\n\n      /**\n       * Create a new AssignmentNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AssignmentNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var object = this._ifNode(callback(this.object, 'object', this));\n        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n        var value = this._ifNode(callback(this.value, 'value', this));\n        return new AssignmentNode(object, index, value);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AssignmentNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AssignmentNode(this.object, this.index, this.value);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        var index = this.index ? this.index.toString(options) : '';\n        var value = this.value.toString(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '(' + value + ')';\n        }\n        return object + index + ' = ' + value;\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index,\n          value: this.value\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n       *     where mathjs is optional\n       * @returns {AssignmentNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n      function toHTML(options) {\n        var object = this.object.toHTML(options);\n        var index = this.index ? this.index.toHTML(options) : '';\n        var value = this.value.toHTML(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n        return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        var index = this.index ? this.index.toTex(options) : '';\n        var value = this.value.toTex(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = \"\\\\left(\".concat(value, \"\\\\right)\");\n        }\n        return object + index + ':=' + value;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AssignmentNode(json.object, json.index, json.value);\n      }\n    }]);\n    return AssignmentNode;\n  }(Node);\n  (0, _defineProperty2[\"default\"])(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createAssignmentNode","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_is","_customs","_factory","_access","_assign","_operators","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","name","dependencies","factory","_ref","subset","matrix","Node","access","accessFactory","assign","assignFactory","needParenthesis","node","parenthesis","implicit","precedence","getPrecedence","exprPrecedence","AssignmentNode","_Node","_super","object","index","_this","isSymbolNode","isAccessorNode","TypeError","Error","isIndexNode","isNode","key","get","isObjectProperty","getObjectProperty","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","set","prop","setSafeProperty","childObject","evalParentObject","parentProp","parent","getSafeProperty","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","_toString","options","toString","toJSON","mathjs","toHTML","_toTex","toTex","concat","fromJSON","json","isClass"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/expression/node/AssignmentNode.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssignmentNode = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _is = require(\"../../utils/is.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _access = require(\"./utils/access.js\");\nvar _assign = require(\"./utils/assign.js\");\nvar _operators = require(\"../operators.js\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nvar createAssignmentNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n    matrix = _ref.matrix,\n    Node = _ref.Node;\n  var access = (0, _access.accessFactory)({\n    subset: subset\n  });\n  var assign = (0, _assign.assignFactory)({\n    subset: subset,\n    matrix: matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = (0, _operators.getPrecedence)(node, parenthesis, implicit);\n    var exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  var AssignmentNode = /*#__PURE__*/function (_Node) {\n    (0, _inherits2[\"default\"])(AssignmentNode, _Node);\n    var _super = _createSuper(AssignmentNode);\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    function AssignmentNode(object, index, value) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, AssignmentNode);\n      _this = _super.call(this);\n      _this.object = object;\n      _this.index = value ? index : null;\n      _this.value = value || index;\n\n      // validate input\n      if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if ((0, _is.isSymbolNode)(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (_this.index && !(0, _is.isIndexNode)(_this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!(0, _is.isNode)(_this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n      return _this;\n    }\n\n    // class name for typing purposes:\n    (0, _createClass2[\"default\"])(AssignmentNode, [{\n      key: \"name\",\n      get:\n      // readonly property name\n      function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n        var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n        var evalValue = this.value._compile(math, argNames);\n        var name = this.object.name;\n        if (!this.index) {\n          // apply a variable to the scope, for example `a=2`\n          if (!(0, _is.isSymbolNode)(this.object)) {\n            throw new TypeError('SymbolNode expected as object');\n          }\n          return function evalAssignmentNode(scope, args, context) {\n            var value = evalValue(scope, args, context);\n            scope.set(name, value);\n            return value;\n          };\n        } else if (this.index.isObjectProperty()) {\n          // apply an object property for example `a.b=2`\n          var prop = this.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            (0, _customs.setSafeProperty)(object, prop, value);\n            return value;\n          };\n        } else if ((0, _is.isSymbolNode)(this.object)) {\n          // update a matrix subset, for example `a[2]=3`\n          return function evalAssignmentNode(scope, args, context) {\n            var childObject = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            // Important:  we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            scope.set(name, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // isAccessorNode(node.object) === true\n          // update a matrix subset, for example `a.b[2]=3`\n\n          // we will not use the compile function of the AccessorNode, but\n          // compile it ourselves here as we need the parent object of the\n          // AccessorNode:\n          // wee need to apply the updated object to parent object\n          var evalParentObject = this.object.object._compile(math, argNames);\n          if (this.object.index.isObjectProperty()) {\n            var parentProp = this.object.index.getObjectProperty();\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              var childObject = (0, _customs.getSafeProperty)(parent, parentProp);\n              // Important: we pass childObject instead of context:\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));\n              return value;\n            };\n          } else {\n            // if some parameters use the 'end' parameter, we need to calculate\n            // the size\n            var evalParentIndex = this.object.index._compile(math, argNames);\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              // Important: we pass parent instead of context:\n              var parentIndex = evalParentIndex(scope, args, parent);\n              var childObject = access(parent, parentIndex);\n              // Important:  we pass childObject instead of context\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              assign(parent, parentIndex, assign(childObject, index, value));\n              return value;\n            };\n          }\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        if (this.index) {\n          callback(this.index, 'index', this);\n        }\n        callback(this.value, 'value', this);\n      }\n\n      /**\n       * Create a new AssignmentNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AssignmentNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var object = this._ifNode(callback(this.object, 'object', this));\n        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n        var value = this._ifNode(callback(this.value, 'value', this));\n        return new AssignmentNode(object, index, value);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AssignmentNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AssignmentNode(this.object, this.index, this.value);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        var index = this.index ? this.index.toString(options) : '';\n        var value = this.value.toString(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '(' + value + ')';\n        }\n        return object + index + ' = ' + value;\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index,\n          value: this.value\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n       *     where mathjs is optional\n       * @returns {AssignmentNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n      function toHTML(options) {\n        var object = this.object.toHTML(options);\n        var index = this.index ? this.index.toHTML(options) : '';\n        var value = this.value.toHTML(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n        return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        var index = this.index ? this.index.toTex(options) : '';\n        var value = this.value.toTex(options);\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = \"\\\\left(\".concat(value, \"\\\\right)\");\n        }\n        return object + index + ':=' + value;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AssignmentNode(json.object, json.index, json.value);\n      }\n    }]);\n    return AssignmentNode;\n  }(Node);\n  (0, _defineProperty2[\"default\"])(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createAssignmentNode = createAssignmentNode;"],"mappings":"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"},"metadata":{},"sourceType":"script"}