{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTranspose = void 0;\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nvar createTranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return transposeMatrix(matrix(x)).valueOf();\n    },\n    Matrix: transposeMatrix,\n    any: _object.clone // scalars\n  });\n\n  function transposeMatrix(x) {\n    // matrix size\n    var size = x.size();\n\n    // result\n    var c;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        c = x.clone();\n        break;\n      case 2:\n        {\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + (0, _string.format)(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n        }\n        break;\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + (0, _string.format)(size) + ')');\n    }\n    return c;\n  }\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = (0, _object.clone)(data[i][j]);\n      }\n    }\n    // return matrix\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    }\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values) {\n          cvalues[q] = (0, _object.clone)(values[k]);\n        }\n      }\n    }\n    // return matrix\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});\nexports.createTranspose = createTranspose;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTranspose","_object","require","_string","_factory","name","dependencies","factory","_ref","typed","matrix","Array","x","transposeMatrix","valueOf","Matrix","any","clone","size","c","length","rows","columns","RangeError","format","storage","_denseTranspose","_sparseTranspose","m","data","_data","transposed","transposedRow","j","i","createDenseMatrix","datatype","_datatype","values","_values","index","_index","ptr","_ptr","cvalues","undefined","cindex","cptr","w","p","l","sum","push","k0","k1","k","q","createSparseMatrix"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/transpose.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTranspose = void 0;\nvar _object = require(\"../../utils/object.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nvar createTranspose = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return transposeMatrix(matrix(x)).valueOf();\n    },\n    Matrix: transposeMatrix,\n    any: _object.clone // scalars\n  });\n\n  function transposeMatrix(x) {\n    // matrix size\n    var size = x.size();\n\n    // result\n    var c;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        c = x.clone();\n        break;\n      case 2:\n        {\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + (0, _string.format)(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n        }\n        break;\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + (0, _string.format)(size) + ')');\n    }\n    return c;\n  }\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = (0, _object.clone)(data[i][j]);\n      }\n    }\n    // return matrix\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    }\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values) {\n          cvalues[q] = (0, _object.clone)(values[k]);\n        }\n      }\n    }\n    // return matrix\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});\nexports.createTranspose = createTranspose;"],"mappings":"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"},"metadata":{},"sourceType":"script"}