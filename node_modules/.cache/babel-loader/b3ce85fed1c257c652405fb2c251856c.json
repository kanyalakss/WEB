{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNthRootNumber = exports.createNthRoot = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nvar createNthRoot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    _BigNumber = _ref.BigNumber;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: _index.nthRootNumber,\n    'number, number': _index.nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(matrix(x), 2).valueOf();\n      };\n    }),\n    DenseMatrix: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(x, 2);\n      };\n    }),\n    SparseMatrix: typed.referTo('SparseMatrix,number', function (selfSn) {\n      return function (x) {\n        return selfSn(x, 2);\n      };\n    }),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse + sparse\n          return matAlgo06xS0S0(x, y, self);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // dense + sparse\n          return matAlgo01xDSid(x, y, self, false);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', function (selfDS) {\n      return function (x, y) {\n        return selfDS(matrix(x), y);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse - scalar\n          return matAlgo11xS0s(y, x, self, true);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexports.createNthRoot = createNthRoot;\nvar createNthRootNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    number: _index.nthRootNumber,\n    'number, number': _index.nthRootNumber\n  });\n});\nexports.createNthRootNumber = createNthRootNumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","createNthRootNumber","createNthRoot","_factory","require","_matAlgo01xDSid","_matAlgo02xDS","_matAlgo06xS0S","_matAlgo11xS0s","_matrixAlgorithmSuite","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","_BigNumber","BigNumber","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo06xS0S0","createMatAlgo06xS0S0","matAlgo11xS0s","createMatAlgo11xS0s","matrixAlgorithmSuite","createMatrixAlgorithmSuite","complexErr","Error","number","nthRootNumber","x","_bigNthRoot","Complex","Array","referTo","selfDn","valueOf","DenseMatrix","SparseMatrix","selfSn","referToSelf","self","y","density","selfDS","scalar","SD","Ss","sS","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","_ref2"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/nthRoot.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNthRootNumber = exports.createNthRoot = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nvar createNthRoot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    _BigNumber = _ref.BigNumber;\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: _index.nthRootNumber,\n    'number, number': _index.nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(matrix(x), 2).valueOf();\n      };\n    }),\n    DenseMatrix: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(x, 2);\n      };\n    }),\n    SparseMatrix: typed.referTo('SparseMatrix,number', function (selfSn) {\n      return function (x) {\n        return selfSn(x, 2);\n      };\n    }),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse + sparse\n          return matAlgo06xS0S0(x, y, self);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // dense + sparse\n          return matAlgo01xDSid(x, y, self, false);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', function (selfDS) {\n      return function (x, y) {\n        return selfDS(matrix(x), y);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse - scalar\n          return matAlgo11xS0s(y, x, self, true);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexports.createNthRoot = createNthRoot;\nvar createNthRootNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    number: _index.nthRootNumber,\n    'number, number': _index.nthRootNumber\n  });\n});\nexports.createNthRootNumber = createNthRootNumber;"],"mappings":"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"},"metadata":{},"sourceType":"script"}