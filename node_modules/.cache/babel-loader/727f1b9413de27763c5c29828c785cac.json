{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGamma = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    multiplyScalar = _ref.multiplyScalar,\n    pow = _ref.pow,\n    _BigNumber = _ref.BigNumber,\n    Complex = _ref.Complex;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return (0, _index.gammaNumber)(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(_index.gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < _index.gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(_index.gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + _index.gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: _index.gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision: precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});\nexports.createGamma = createGamma;","map":{"version":3,"names":["Object","defineProperty","exports","value","createGamma","_factory","require","_index","name","dependencies","factory","_ref","typed","config","multiplyScalar","pow","_BigNumber","BigNumber","Complex","gammaComplex","n","im","gammaNumber","re","_t","r","Math","PI","div","sin","x","gammaP","i","length","gammaPval","add","t","gammaG","twoPiSqrt","sqrt","tpow","expt","neg","exp","mul","number","isInteger","isNegative","isZero","Infinity","bigFactorial","minus","isFinite","NaN","Error","precision","log","toNumber","Big","clone","times","p","prod","sum","toPrecision"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/probability/gamma.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGamma = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nvar createGamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    multiplyScalar = _ref.multiplyScalar,\n    pow = _ref.pow,\n    _BigNumber = _ref.BigNumber,\n    Complex = _ref.Complex;\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * To avoid confusion with the matrix Gamma function, this function does\n   * not apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | BigNumber | Complex} n   A real or complex number\n   * @return {number | BigNumber | Complex}    The gamma of `n`\n   */\n\n  function gammaComplex(n) {\n    if (n.im === 0) {\n      return (0, _index.gammaNumber)(n.re);\n    }\n\n    // Lanczos approximation doesn't work well with real part lower than 0.5\n    // So reflection formula is required\n    if (n.re < 0.5) {\n      // Euler's reflection formula\n      // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n      // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n      // thanks to imperfect sin implementation sin(PI * n) != 0\n      // we can safely use it anyway\n      var _t = new Complex(1 - n.re, -n.im);\n      var r = new Complex(Math.PI * n.re, Math.PI * n.im);\n      return new Complex(Math.PI).div(r.sin()).div(gammaComplex(_t));\n    }\n\n    // Lanczos approximation\n    // z -= 1\n    n = new Complex(n.re - 1, n.im);\n\n    // x = gammaPval[0]\n    var x = new Complex(_index.gammaP[0], 0);\n    // for (i, gammaPval) in enumerate(gammaP):\n    for (var i = 1; i < _index.gammaP.length; ++i) {\n      // x += gammaPval / (z + i)\n      var gammaPval = new Complex(_index.gammaP[i], 0);\n      x = x.add(gammaPval.div(n.add(i)));\n    }\n    // t = z + gammaG + 0.5\n    var t = new Complex(n.re + _index.gammaG + 0.5, n.im);\n\n    // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n    var twoPiSqrt = Math.sqrt(2 * Math.PI);\n    var tpow = t.pow(n.add(0.5));\n    var expt = t.neg().exp();\n\n    // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n    return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n  }\n  return typed(name, {\n    number: _index.gammaNumber,\n    Complex: gammaComplex,\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    }\n  });\n\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision: precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});\nexports.createGamma = createGamma;"],"mappings":"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"},"metadata":{},"sourceType":"script"}