{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo09xS0Sf = require(\"../../type/matrix/utils/matAlgo09xS0Sf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nvar createAtan2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo09xS0Sf = (0, _matAlgo09xS0Sf.createMatAlgo09xS0Sf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  return typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored\n    // the imaginary.\n\n    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {\n      return BigNumber.atan2(y, x);\n    }\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createAtan2 = createAtan2;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAtan2","_factory","require","_matAlgo02xDS","_matAlgo03xDSf","_matAlgo09xS0Sf","_matAlgo11xS0s","_matAlgo12xSfs","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo09xS0Sf","createMatAlgo09xS0Sf","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","Math","atan2","BigNumberBigNumber","y","x","scalar","SS","DS","SD","Ss","sS"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/trigonometry/atan2.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo09xS0Sf = require(\"../../type/matrix/utils/matAlgo09xS0Sf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nvar createAtan2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo09xS0Sf = (0, _matAlgo09xS0Sf.createMatAlgo09xS0Sf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n  return typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored\n    // the imaginary.\n\n    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {\n      return BigNumber.atan2(y, x);\n    }\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createAtan2 = createAtan2;"],"mappings":"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"},"metadata":{},"sourceType":"script"}