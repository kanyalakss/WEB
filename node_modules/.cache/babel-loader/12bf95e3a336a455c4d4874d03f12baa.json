{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPinv = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nvar createPinv = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    inv = _ref.inv,\n    deepEqual = _ref.deepEqual,\n    equal = _ref.equal,\n    dotDivide = _ref.dotDivide,\n    dot = _ref.dot,\n    ctranspose = _ref.ctranspose,\n    divideScalar = _ref.divideScalar,\n    multiply = _ref.multiply,\n    add = _ref.add,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = (0, _is.isMatrix)(x) ? x.size() : (0, _array.arraySize)(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {\n                  // Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n            if ((0, _is.isMatrix)(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return (0, _object.clone)(x); // zero\n      return divideScalar(1, x);\n    }\n  });\n\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n  function _pinv(mat, rows, cols) {\n    var _rankFact2 = _rankFact(mat, rows, cols),\n      C = _rankFact2.C,\n      F = _rankFact2.F; // TODO: Use SVD instead (may improve precision)\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n  function _rref(mat, rows, cols) {\n    var M = (0, _object.clone)(mat);\n    var lead = 0;\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n      var i = r;\n      while (_isZero(M[i][lead])) {\n        i++;\n        if (rows === i) {\n          i = r;\n          lead++;\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n      var _ref2 = [M[r], M[i]];\n      M[i] = _ref2[0];\n      M[r] = _ref2[1];\n      var val = M[r][lead];\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n      lead++;\n    }\n    return M;\n  }\n\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n    var C = mat.map(function (_, i) {\n      return _.filter(function (_, j) {\n        return j < rows && !_isZero(dot(rref[j], rref[j]));\n      });\n    });\n    var F = rref.filter(function (_, i) {\n      return !_isZero(dot(rref[i], rref[i]));\n    });\n    return {\n      C: C,\n      F: F\n    };\n  }\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});\nexports.createPinv = createPinv;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPinv","_is","require","_array","_factory","_string","_object","name","dependencies","factory","_ref","typed","matrix","inv","deepEqual","equal","dotDivide","dot","ctranspose","divideScalar","multiply","add","Complex","ArrayMatrix","x","size","isMatrix","arraySize","length","_isZeros","rows","cols","err","Error","message","match","_pinv","valueOf","storage","RangeError","format","any","clone","mat","_rankFact2","_rankFact","C","F","Cpinv","Fpinv","_rref","M","lead","r","i","_isZero","_ref2","val","j","_i","_j","rref","map","_","filter","arr"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/pinv.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPinv = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar name = 'pinv';\nvar dependencies = ['typed', 'matrix', 'inv', 'deepEqual', 'equal', 'dotDivide', 'dot', 'ctranspose', 'divideScalar', 'multiply', 'add', 'Complex'];\nvar createPinv = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    inv = _ref.inv,\n    deepEqual = _ref.deepEqual,\n    equal = _ref.equal,\n    dotDivide = _ref.dotDivide,\n    dot = _ref.dot,\n    ctranspose = _ref.ctranspose,\n    divideScalar = _ref.divideScalar,\n    multiply = _ref.multiply,\n    add = _ref.add,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix.\n   *\n   * Syntax:\n   *\n   *     math.pinv(x)\n   *\n   * Examples:\n   *\n   *     math.pinv([[1, 2], [3, 4]])          // returns [[-2, 1], [1.5, -0.5]]\n   *     math.pinv([[1, 0], [0, 1], [0, 1]])  // returns [[1, 0, 0], [0, 0.5, 0.5]]\n   *     math.pinv(4)                         // returns 0.25\n   *\n   * See also:\n   *\n   *     inv\n   *\n   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed\n   * @return {number | Complex | Array | Matrix} The inverse of `x`.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(x) {\n      var size = (0, _is.isMatrix)(x) ? x.size() : (0, _array.arraySize)(x);\n      switch (size.length) {\n        case 1:\n          // vector\n          if (_isZeros(x)) return ctranspose(x); // null vector\n          if (size[0] === 1) {\n            return inv(x); // invertible matrix\n          } else {\n            return dotDivide(ctranspose(x), dot(x, x));\n          }\n        case 2:\n          // two dimensional array\n          {\n            if (_isZeros(x)) return ctranspose(x); // zero matrixx\n            var rows = size[0];\n            var cols = size[1];\n            if (rows === cols) {\n              try {\n                return inv(x); // invertible matrix\n              } catch (err) {\n                if (err instanceof Error && err.message.match(/Cannot calculate inverse, determinant is zero/)) {\n                  // Expected\n                } else {\n                  throw err;\n                }\n              }\n            }\n            if ((0, _is.isMatrix)(x)) {\n              return matrix(_pinv(x.valueOf(), rows, cols), x.storage());\n            } else {\n              // return an Array\n              return _pinv(x, rows, cols);\n            }\n          }\n        default:\n          // multi dimensional array\n          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');\n      }\n    },\n    any: function any(x) {\n      // scalar\n      if (equal(x, 0)) return (0, _object.clone)(x); // zero\n      return divideScalar(1, x);\n    }\n  });\n\n  /**\n   * Calculate the Moore–Penrose inverse of a matrix\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]} pinv    Pseudoinverse matrix\n   * @private\n   */\n  function _pinv(mat, rows, cols) {\n    var _rankFact2 = _rankFact(mat, rows, cols),\n      C = _rankFact2.C,\n      F = _rankFact2.F; // TODO: Use SVD instead (may improve precision)\n    var Cpinv = multiply(inv(multiply(ctranspose(C), C)), ctranspose(C));\n    var Fpinv = multiply(ctranspose(F), inv(multiply(F, ctranspose(F))));\n    return multiply(Fpinv, Cpinv);\n  }\n\n  /**\n   * Calculate the reduced row echelon form of a matrix\n   *\n   * Modified from https://rosettacode.org/wiki/Reduced_row_echelon_form\n   *\n   * @param {Array[]} mat     A matrix\n   * @param {number} rows     Number of rows\n   * @param {number} cols     Number of columns\n   * @return {Array[]}        Reduced row echelon form\n   * @private\n   */\n  function _rref(mat, rows, cols) {\n    var M = (0, _object.clone)(mat);\n    var lead = 0;\n    for (var r = 0; r < rows; r++) {\n      if (cols <= lead) {\n        return M;\n      }\n      var i = r;\n      while (_isZero(M[i][lead])) {\n        i++;\n        if (rows === i) {\n          i = r;\n          lead++;\n          if (cols === lead) {\n            return M;\n          }\n        }\n      }\n      var _ref2 = [M[r], M[i]];\n      M[i] = _ref2[0];\n      M[r] = _ref2[1];\n      var val = M[r][lead];\n      for (var j = 0; j < cols; j++) {\n        M[r][j] = dotDivide(M[r][j], val);\n      }\n      for (var _i = 0; _i < rows; _i++) {\n        if (_i === r) continue;\n        val = M[_i][lead];\n        for (var _j = 0; _j < cols; _j++) {\n          M[_i][_j] = add(M[_i][_j], multiply(-1, multiply(val, M[r][_j])));\n        }\n      }\n      lead++;\n    }\n    return M;\n  }\n\n  /**\n   * Calculate the rank factorization of a matrix\n   *\n   * @param {Array[]} mat                  A matrix (M)\n   * @param {number} rows                  Number of rows\n   * @param {number} cols                  Number of columns\n   * @return {{C: Array, F: Array}}        rank factorization where M = C F\n   * @private\n   */\n  function _rankFact(mat, rows, cols) {\n    var rref = _rref(mat, rows, cols);\n    var C = mat.map(function (_, i) {\n      return _.filter(function (_, j) {\n        return j < rows && !_isZero(dot(rref[j], rref[j]));\n      });\n    });\n    var F = rref.filter(function (_, i) {\n      return !_isZero(dot(rref[i], rref[i]));\n    });\n    return {\n      C: C,\n      F: F\n    };\n  }\n  function _isZero(x) {\n    return equal(add(x, Complex(1, 1)), add(0, Complex(1, 1)));\n  }\n  function _isZeros(arr) {\n    return deepEqual(add(arr, Complex(1, 1)), add(multiply(arr, 0), Complex(1, 1)));\n  }\n});\nexports.createPinv = createPinv;"],"mappings":"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"},"metadata":{},"sourceType":"script"}