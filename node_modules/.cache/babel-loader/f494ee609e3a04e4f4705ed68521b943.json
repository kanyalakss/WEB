{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFlatten = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nvar createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Flatten a multidimensional matrix into a single dimensional matrix.\n   * A new matrix is returned, the original matrix is left untouched.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.flatten)(x);\n    },\n    Matrix: function Matrix(x) {\n      var flat = (0, _array.flatten)(x.toArray());\n      // TODO: return the same matrix type as x (Dense or Sparse Matrix)\n      return matrix(flat);\n    }\n  });\n});\nexports.createFlatten = createFlatten;","map":{"version":3,"names":["Object","defineProperty","exports","value","createFlatten","_array","require","_factory","name","dependencies","factory","_ref","typed","matrix","Array","x","flatten","Matrix","flat","toArray"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/flatten.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFlatten = void 0;\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nvar createFlatten = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  /**\n   * Flatten a multidimensional matrix into a single dimensional matrix.\n   * A new matrix is returned, the original matrix is left untouched.\n   *\n   * Syntax:\n   *\n   *    math.flatten(x)\n   *\n   * Examples:\n   *\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\n   *\n   * See also:\n   *\n   *    concat, resize, size, squeeze\n   *\n   * @param {Matrix | Array} x   Matrix to be flattened\n   * @return {Matrix | Array} Returns the flattened matrix\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.flatten)(x);\n    },\n    Matrix: function Matrix(x) {\n      var flat = (0, _array.flatten)(x.toArray());\n      // TODO: return the same matrix type as x (Dense or Sparse Matrix)\n      return matrix(flat);\n    }\n  });\n});\nexports.createFlatten = createFlatten;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAIC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIE,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,IAAIL,aAAa,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC3F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjBM,KAAK,EAAE,SAASA,KAAK,CAACC,CAAC,EAAE;MACvB,OAAO,CAAC,CAAC,EAAEV,MAAM,CAACW,OAAO,EAAED,CAAC,CAAC;IAC/B,CAAC;IACDE,MAAM,EAAE,SAASA,MAAM,CAACF,CAAC,EAAE;MACzB,IAAIG,IAAI,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACW,OAAO,EAAED,CAAC,CAACI,OAAO,EAAE,CAAC;MAC3C;MACA,OAAON,MAAM,CAACK,IAAI,CAAC;IACrB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFhB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script"}