{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (x.value === null || x.value === undefined) {\n          throw new Error('Parameter x contains a unit with undefined value');\n        }\n        if (y.value === null || y.value === undefined) {\n          throw new Error('Parameter y contains a unit with undefined value');\n        }\n        if (!x.equalBase(y)) throw new Error('Units do not match');\n        var res = x.clone();\n        res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n        res.fixPrefix = false;\n        return res;\n      };\n    })\n  });\n});\nexports.createAddScalar = createAddScalar;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAddScalar","_factory","require","_index","name","dependencies","factory","_ref","typed","addNumber","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","referToSelf","self","undefined","Error","equalBase","res","clone","find","valueType","fixPrefix"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/addScalar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAddScalar = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nvar createAddScalar = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': _index.addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (x.value === null || x.value === undefined) {\n          throw new Error('Parameter x contains a unit with undefined value');\n        }\n        if (y.value === null || y.value === undefined) {\n          throw new Error('Parameter y contains a unit with undefined value');\n        }\n        if (!x.equalBase(y)) throw new Error('Units do not match');\n        var res = x.clone();\n        res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n        res.fixPrefix = false;\n        return res;\n      };\n    })\n  });\n});\nexports.createAddScalar = createAddScalar;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,MAAM,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIE,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIL,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,MAAM,CAACM,SAAS;IAClC,kBAAkB,EAAE,SAASC,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,sBAAsB,EAAE,SAASE,kBAAkB,CAACH,CAAC,EAAEC,CAAC,EAAE;MACxD,OAAOD,CAAC,CAACI,IAAI,CAACH,CAAC,CAAC;IAClB,CAAC;IACD,oBAAoB,EAAE,SAASI,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAE;MACpD,OAAOD,CAAC,CAACE,GAAG,CAACD,CAAC,CAAC;IACjB,CAAC;IACD,YAAY,EAAEJ,KAAK,CAACS,WAAW,CAAC,UAAUC,IAAI,EAAE;MAC9C,OAAO,UAAUP,CAAC,EAAEC,CAAC,EAAE;QACrB,IAAID,CAAC,CAACZ,KAAK,KAAK,IAAI,IAAIY,CAAC,CAACZ,KAAK,KAAKoB,SAAS,EAAE;UAC7C,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;QACrE;QACA,IAAIR,CAAC,CAACb,KAAK,KAAK,IAAI,IAAIa,CAAC,CAACb,KAAK,KAAKoB,SAAS,EAAE;UAC7C,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;QACrE;QACA,IAAI,CAACT,CAAC,CAACU,SAAS,CAACT,CAAC,CAAC,EAAE,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;QAC1D,IAAIE,GAAG,GAAGX,CAAC,CAACY,KAAK,EAAE;QACnBD,GAAG,CAACvB,KAAK,GAAGS,KAAK,CAACgB,IAAI,CAACN,IAAI,EAAE,CAACI,GAAG,CAACG,SAAS,EAAE,EAAEb,CAAC,CAACa,SAAS,EAAE,CAAC,CAAC,CAACH,GAAG,CAACvB,KAAK,EAAEa,CAAC,CAACb,KAAK,CAAC;QAClFuB,GAAG,CAACI,SAAS,GAAG,KAAK;QACrB,OAAOJ,GAAG;MACZ,CAAC;IACH,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;AACFxB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}