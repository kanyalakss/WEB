{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHypot = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nvar createHypot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    addScalar = _ref.addScalar,\n    divideScalar = _ref.divideScalar,\n    multiplyScalar = _ref.multiplyScalar,\n    sqrt = _ref.sqrt,\n    smaller = _ref.smaller,\n    isPositive = _ref.isPositive;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: _hypot,\n    Matrix: function Matrix(M) {\n      return _hypot((0, _array.flatten)(M.toArray()));\n    }\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n    for (var i = 0; i < args.length; i++) {\n      if ((0, _is.isComplex)(args[i])) {\n        throw new TypeError('Unexpected type of argument to hypot');\n      }\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n    return multiplyScalar(largest, sqrt(result));\n  }\n});\nexports.createHypot = createHypot;","map":{"version":3,"names":["Object","defineProperty","exports","value","createHypot","_factory","require","_array","_is","name","dependencies","factory","_ref","typed","abs","addScalar","divideScalar","multiplyScalar","sqrt","smaller","isPositive","_hypot","Array","Matrix","M","flatten","toArray","args","result","largest","i","length","isComplex","TypeError"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/hypot.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHypot = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _array = require(\"../../utils/array.js\");\nvar _is = require(\"../../utils/is.js\");\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nvar createHypot = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    abs = _ref.abs,\n    addScalar = _ref.addScalar,\n    divideScalar = _ref.divideScalar,\n    multiplyScalar = _ref.multiplyScalar,\n    sqrt = _ref.sqrt,\n    smaller = _ref.smaller,\n    isPositive = _ref.isPositive;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  return typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: _hypot,\n    Matrix: function Matrix(M) {\n      return _hypot((0, _array.flatten)(M.toArray()));\n    }\n  });\n\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n    for (var i = 0; i < args.length; i++) {\n      if ((0, _is.isComplex)(args[i])) {\n        throw new TypeError('Unexpected type of argument to hypot');\n      }\n      var value = abs(args[i]);\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n    return multiplyScalar(largest, sqrt(result));\n  }\n});\nexports.createHypot = createHypot;"],"mappings":"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"},"metadata":{},"sourceType":"script"}