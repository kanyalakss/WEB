{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'atan';\nvar dependencies = ['typed'];\nvar createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * To avoid confusion with matrix arctangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    }\n  });\n});\nexports.createAtan = createAtan;","map":{"version":3,"names":["Object","defineProperty","exports","value","createAtan","_factory","require","name","dependencies","factory","_ref","typed","number","x","Math","atan","Complex","BigNumber"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/trigonometry/atan.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAtan = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'atan';\nvar dependencies = ['typed'];\nvar createAtan = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * To avoid confusion with matrix arctangent, this function does not apply\n   * to matrices.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(2)             // returns number 1.1071487177940904\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex} x   Function input\n   * @return {number | BigNumber | Complex} The arc tangent of x\n   */\n  return typed('atan', {\n    number: function number(x) {\n      return Math.atan(x);\n    },\n    Complex: function Complex(x) {\n      return x.atan();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.atan();\n    }\n  });\n});\nexports.createAtan = createAtan;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIJ,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAAC,MAAM,EAAE;IACnBC,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,OAAOC,IAAI,CAACC,IAAI,CAACF,CAAC,CAAC;IACrB,CAAC;IACDG,OAAO,EAAE,SAASA,OAAO,CAACH,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACE,IAAI,EAAE;IACjB,CAAC;IACDE,SAAS,EAAE,SAASA,SAAS,CAACJ,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACE,IAAI,EAAE;IACjB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFb,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script"}