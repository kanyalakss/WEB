{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotate = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _array = require(\"../../utils/array.js\");\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nvar createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    multiply = _ref.multiply,\n    rotationMatrix = _ref.rotationMatrix;\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns [-12, 11]\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns [-12, 11]\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns [0, 1, 0]\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns Matrix [0, 1, 0]\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns [cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)]\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});\nexports.createRotate = createRotate;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRotate","_factory","require","_array","name","dependencies","factory","_ref","typed","multiply","rotationMatrix","ArrayNumberBigNumberComplexUnit","w","theta","_validateSize","matrixRes","toArray","MatrixNumberBigNumberComplexUnit","ArrayNumberBigNumberComplexUnitArrayMatrix","v","MatrixNumberBigNumberComplexUnitArrayMatrix","expectedSize","actualSize","Array","isArray","arraySize","size","length","RangeError","concat"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/rotate.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRotate = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _array = require(\"../../utils/array.js\");\nvar name = 'rotate';\nvar dependencies = ['typed', 'multiply', 'rotationMatrix'];\nvar createRotate = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    multiply = _ref.multiply,\n    rotationMatrix = _ref.rotationMatrix;\n  /**\n     * Rotate a vector of size 1x2 counter-clockwise by a given angle\n     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis\n     *\n     * Syntax:\n     *\n     *    math.rotate(w, theta)\n     *    math.rotate(w, theta, v)\n     *\n     * Examples:\n     *\n     *    math.rotate([11, 12], math.pi / 2)                           // returns [-12, 11]\n     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns [-12, 11]\n     *\n     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns [0, 1, 0]\n     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns Matrix [0, 1, 0]\n     *\n     *    math.rotate([1, 0], math.complex(1 + i))                     // returns [cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)]\n     *\n     * See also:\n     *\n     *    matrix, rotationMatrix\n     *\n     * @param {Array | Matrix} w                             Vector to rotate\n     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle\n     * @param {Array | Matrix} [v]                           Rotation axis\n     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w\n     */\n  return typed(name, {\n    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      var matrixRes = multiply(rotationMatrix(theta), w);\n      return matrixRes.toArray();\n    },\n    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {\n      _validateSize(w, 2);\n      return multiply(rotationMatrix(theta), w);\n    },\n    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      var matrixRes = multiply(rotationMatrix(theta, v), w);\n      return matrixRes;\n    },\n    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {\n      _validateSize(w, 3);\n      return multiply(rotationMatrix(theta, v), w);\n    }\n  });\n  function _validateSize(v, expectedSize) {\n    var actualSize = Array.isArray(v) ? (0, _array.arraySize)(v) : v.size();\n    if (actualSize.length > 2) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize.length === 2 && actualSize[1] !== 1) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n    if (actualSize[0] !== expectedSize) {\n      throw new RangeError(\"Vector must be of dimensions 1x\".concat(expectedSize));\n    }\n  }\n});\nexports.createRotate = createRotate;"],"mappings":"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"},"metadata":{},"sourceType":"script"}