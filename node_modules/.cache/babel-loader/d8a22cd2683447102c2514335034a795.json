{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitAnd = void 0;\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nvar createBitAnd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': _index.bitAndNumber,\n    'BigNumber, BigNumber': _bitwise.bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});\nexports.createBitAnd = createBitAnd;","map":{"version":3,"names":["Object","defineProperty","exports","value","createBitAnd","_bitwise","require","_matAlgo02xDS","_matAlgo11xS0s","_matAlgo06xS0S","_factory","_matrixAlgorithmSuite","_index","name","dependencies","factory","_ref","typed","matrix","equalScalar","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo06xS0S0","createMatAlgo06xS0S0","matAlgo11xS0s","createMatAlgo11xS0s","matrixAlgorithmSuite","createMatrixAlgorithmSuite","bitAndNumber","bitAndBigNumber","SS","DS","Ss"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/bitwise/bitAnd.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBitAnd = void 0;\nvar _bitwise = require(\"../../utils/bignumber/bitwise.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo06xS0S = require(\"../../type/matrix/utils/matAlgo06xS0S0.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nvar createBitAnd = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = (0, _matAlgo06xS0S.createMatAlgo06xS0S0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': _index.bitAndNumber,\n    'BigNumber, BigNumber': _bitwise.bitAndBigNumber\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});\nexports.createBitAnd = createBitAnd;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAC1D,IAAIC,aAAa,GAAGD,OAAO,CAAC,0CAA0C,CAAC;AACvE,IAAIE,cAAc,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAIG,cAAc,GAAGH,OAAO,CAAC,2CAA2C,CAAC;AACzE,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIK,qBAAqB,GAAGL,OAAO,CAAC,iDAAiD,CAAC;AACtF,IAAIM,MAAM,GAAGN,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIO,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;AACrD,IAAIV,YAAY,GAAG,eAAe,CAAC,CAAC,EAAEM,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC1F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,WAAW,GAAGH,IAAI,CAACG,WAAW;EAChC,IAAIC,aAAa,GAAG,CAAC,CAAC,EAAEb,aAAa,CAACc,mBAAmB,EAAE;IACzDJ,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIG,cAAc,GAAG,CAAC,CAAC,EAAEb,cAAc,CAACc,oBAAoB,EAAE;IAC5DN,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIK,aAAa,GAAG,CAAC,CAAC,EAAEhB,cAAc,CAACiB,mBAAmB,EAAE;IAC1DR,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIO,oBAAoB,GAAG,CAAC,CAAC,EAAEf,qBAAqB,CAACgB,0BAA0B,EAAE;IAC/EV,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,MAAM,CAACgB,YAAY;IACrC,sBAAsB,EAAEvB,QAAQ,CAACwB;EACnC,CAAC,EAAEH,oBAAoB,CAAC;IACtBI,EAAE,EAAER,cAAc;IAClBS,EAAE,EAAEX,aAAa;IACjBY,EAAE,EAAER;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFtB,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script"}