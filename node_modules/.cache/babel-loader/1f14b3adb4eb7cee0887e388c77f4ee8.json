{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareTextNumber = exports.createCompareText = void 0;\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\n_string.compareText.signature = 'any, any';\nvar createCompareText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, _string.compareText, matrixAlgorithmSuite({\n    elop: _string.compareText,\n    Ds: true\n  }));\n});\nexports.createCompareText = createCompareText;\nvar createCompareTextNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, _string.compareText);\n});\nexports.createCompareTextNumber = createCompareTextNumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","createCompareTextNumber","createCompareText","_string","require","_factory","_matrixAlgorithmSuite","name","dependencies","compareText","signature","factory","_ref","typed","matrix","matrixAlgorithmSuite","createMatrixAlgorithmSuite","elop","Ds","_ref2"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/relational/compareText.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareTextNumber = exports.createCompareText = void 0;\nvar _string = require(\"../../utils/string.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\n_string.compareText.signature = 'any, any';\nvar createCompareText = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, _string.compareText, matrixAlgorithmSuite({\n    elop: _string.compareText,\n    Ds: true\n  }));\n});\nexports.createCompareText = createCompareText;\nvar createCompareTextNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, _string.compareText);\n});\nexports.createCompareTextNumber = createCompareTextNumber;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAGF,OAAO,CAACG,iBAAiB,GAAG,KAAK,CAAC;AACpE,IAAIC,OAAO,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,iDAAiD,CAAC;AACtF,IAAIG,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtCL,OAAO,CAACM,WAAW,CAACC,SAAS,GAAG,UAAU;AAC1C,IAAIR,iBAAiB,GAAG,eAAe,CAAC,CAAC,EAAEG,QAAQ,CAACM,OAAO,EAAEJ,IAAI,EAAEC,YAAY,EAAE,UAAUI,IAAI,EAAE;EAC/F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;EACtB,IAAIC,oBAAoB,GAAG,CAAC,CAAC,EAAET,qBAAqB,CAACU,0BAA0B,EAAE;IAC/EH,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACN,IAAI,EAAEJ,OAAO,CAACM,WAAW,EAAEM,oBAAoB,CAAC;IAC3DE,IAAI,EAAEd,OAAO,CAACM,WAAW;IACzBS,EAAE,EAAE;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFnB,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAID,uBAAuB,GAAG,eAAe,CAAC,CAAC,EAAEI,QAAQ,CAACM,OAAO,EAAEJ,IAAI,EAAE,CAAC,OAAO,CAAC,EAAE,UAAUY,KAAK,EAAE;EACnG,IAAIN,KAAK,GAAGM,KAAK,CAACN,KAAK;EACvB,OAAOA,KAAK,CAACN,IAAI,EAAEJ,OAAO,CAACM,WAAW,CAAC;AACzC,CAAC,CAAC;AACFV,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script"}