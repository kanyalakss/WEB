{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryMinus = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nvar createUnaryMinus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: _index.unaryMinusNumber,\n    'Complex | BigNumber | Fraction': function ComplexBigNumberFraction(x) {\n      return x.neg();\n    },\n    Unit: typed.referToSelf(function (self) {\n      return function (x) {\n        var res = x.clone();\n        res.value = typed.find(self, res.valueType())(x.value);\n        return res;\n      };\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self, true);\n      };\n    })\n\n    // TODO: add support for string\n  });\n});\n\nexports.createUnaryMinus = createUnaryMinus;","map":{"version":3,"names":["Object","defineProperty","exports","value","createUnaryMinus","_factory","require","_collection","_index","name","dependencies","factory","_ref","typed","number","unaryMinusNumber","ComplexBigNumberFraction","x","neg","Unit","referToSelf","self","res","clone","find","valueType","deepMap"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/unaryMinus.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUnaryMinus = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nvar createUnaryMinus = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: _index.unaryMinusNumber,\n    'Complex | BigNumber | Fraction': function ComplexBigNumberFraction(x) {\n      return x.neg();\n    },\n    Unit: typed.referToSelf(function (self) {\n      return function (x) {\n        var res = x.clone();\n        res.value = typed.find(self, res.valueType())(x.value);\n        return res;\n      };\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self, true);\n      };\n    })\n\n    // TODO: add support for string\n  });\n});\nexports.createUnaryMinus = createUnaryMinus;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACtD,IAAIE,MAAM,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIG,IAAI,GAAG,YAAY;AACvB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,IAAIN,gBAAgB,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC9F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,MAAM,CAACO,gBAAgB;IAC/B,gCAAgC,EAAE,SAASC,wBAAwB,CAACC,CAAC,EAAE;MACrE,OAAOA,CAAC,CAACC,GAAG,EAAE;IAChB,CAAC;IACDC,IAAI,EAAEN,KAAK,CAACO,WAAW,CAAC,UAAUC,IAAI,EAAE;MACtC,OAAO,UAAUJ,CAAC,EAAE;QAClB,IAAIK,GAAG,GAAGL,CAAC,CAACM,KAAK,EAAE;QACnBD,GAAG,CAACnB,KAAK,GAAGU,KAAK,CAACW,IAAI,CAACH,IAAI,EAAEC,GAAG,CAACG,SAAS,EAAE,CAAC,CAACR,CAAC,CAACd,KAAK,CAAC;QACtD,OAAOmB,GAAG;MACZ,CAAC;IACH,CAAC,CAAC;IACF;IACA,gBAAgB,EAAET,KAAK,CAACO,WAAW,CAAC,UAAUC,IAAI,EAAE;MAClD,OAAO,UAAUJ,CAAC,EAAE;QAClB,OAAO,CAAC,CAAC,EAAEV,WAAW,CAACmB,OAAO,EAAET,CAAC,EAAEI,IAAI,EAAE,IAAI,CAAC;MAChD,CAAC;IACH,CAAC;;IAED;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AACFnB,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script"}