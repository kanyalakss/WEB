{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareNumber = exports.createCompare = void 0;\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _compareUnits = require(\"./compareUnits.js\");\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nvar createCompare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    equalScalar = _ref.equalScalar,\n    matrix = _ref.matrix,\n    BigNumber = _ref.BigNumber,\n    Fraction = _ref.Fraction,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var compareUnits = (0, _compareUnits.createCompareUnits)({\n    typed: typed\n  });\n\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, createCompareNumber({\n    typed: typed,\n    config: config\n  }), {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexports.createCompare = createCompare;\nvar createCompareNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n    config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});\nexports.createCompareNumber = createCompareNumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","createCompareNumber","createCompare","_nearlyEqual","require","_number","_factory","_matAlgo03xDSf","_matAlgo12xSfs","_matAlgo05xSfSf","_matrixAlgorithmSuite","_compareUnits","name","dependencies","factory","_ref","typed","config","equalScalar","matrix","BigNumber","Fraction","DenseMatrix","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo05xSfSf","createMatAlgo05xSfSf","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","compareUnits","createCompareUnits","booleanBoolean","x","y","BigNumberBigNumber","nearlyEqual","epsilon","cmp","FractionFraction","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/relational/compare.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompareNumber = exports.createCompare = void 0;\nvar _nearlyEqual = require(\"../../utils/bignumber/nearlyEqual.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar _compareUnits = require(\"./compareUnits.js\");\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nvar createCompare = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    equalScalar = _ref.equalScalar,\n    matrix = _ref.matrix,\n    BigNumber = _ref.BigNumber,\n    Fraction = _ref.Fraction,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n  var compareUnits = (0, _compareUnits.createCompareUnits)({\n    typed: typed\n  });\n\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n  return typed(name, createCompareNumber({\n    typed: typed,\n    config: config\n  }), {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexports.createCompare = createCompare;\nvar createCompareNumber = /* #__PURE__ */(0, _factory.factory)(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n    config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});\nexports.createCompareNumber = createCompareNumber;"],"mappings":"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"},"metadata":{},"sourceType":"script"}