{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDotDivide = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo07xSSf = require(\"../../type/matrix/utils/matAlgo07xSSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nvar createDotDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    divideScalar = _ref.divideScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo07xSSf = (0, _matAlgo07xSSf.createMatAlgo07xSSf)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: divideScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createDotDivide = createDotDivide;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDotDivide","_factory","require","_matAlgo02xDS","_matAlgo03xDSf","_matAlgo07xSSf","_matAlgo11xS0s","_matAlgo12xSfs","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","equalScalar","divideScalar","DenseMatrix","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo07xSSf","createMatAlgo07xSSf","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","elop","SS","DS","SD","Ss","sS"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/dotDivide.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDotDivide = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo07xSSf = require(\"../../type/matrix/utils/matAlgo07xSSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'dotDivide';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nvar createDotDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    divideScalar = _ref.divideScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo07xSSf = (0, _matAlgo07xSSf.createMatAlgo07xSSf)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: divideScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createDotDivide = createDotDivide;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,aAAa,GAAGD,OAAO,CAAC,0CAA0C,CAAC;AACvE,IAAIE,cAAc,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAIG,cAAc,GAAGH,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAII,cAAc,GAAGJ,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAIK,cAAc,GAAGL,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAIM,qBAAqB,GAAGN,OAAO,CAAC,iDAAiD,CAAC;AACtF,IAAIO,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,CAAC;AACpF,IAAIV,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACU,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,WAAW,GAAGH,IAAI,CAACG,WAAW;IAC9BC,YAAY,GAAGJ,IAAI,CAACI,YAAY;IAChCC,WAAW,GAAGL,IAAI,CAACK,WAAW;EAChC,IAAIC,aAAa,GAAG,CAAC,CAAC,EAAEf,aAAa,CAACgB,mBAAmB,EAAE;IACzDN,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIK,aAAa,GAAG,CAAC,CAAC,EAAEhB,cAAc,CAACiB,mBAAmB,EAAE;IAC1DR,KAAK,EAAEA;EACT,CAAC,CAAC;EACF,IAAIS,aAAa,GAAG,CAAC,CAAC,EAAEjB,cAAc,CAACkB,mBAAmB,EAAE;IAC1DV,KAAK,EAAEA,KAAK;IACZI,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIO,aAAa,GAAG,CAAC,CAAC,EAAElB,cAAc,CAACmB,mBAAmB,EAAE;IAC1DZ,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIW,aAAa,GAAG,CAAC,CAAC,EAAEnB,cAAc,CAACoB,mBAAmB,EAAE;IAC1Dd,KAAK,EAAEA,KAAK;IACZI,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIW,oBAAoB,GAAG,CAAC,CAAC,EAAEpB,qBAAqB,CAACqB,0BAA0B,EAAE;IAC/EhB,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAEmB,oBAAoB,CAAC;IACtCE,IAAI,EAAEd,YAAY;IAClBe,EAAE,EAAET,aAAa;IACjBU,EAAE,EAAEZ,aAAa;IACjBa,EAAE,EAAEf,aAAa;IACjBgB,EAAE,EAAEV,aAAa;IACjBW,EAAE,EAAET;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF5B,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}