{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createLog2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.log2Number)(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self);\n      };\n    })\n  });\n\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});\nexports.createLog2 = createLog2;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLog2","_factory","require","_collection","_index","name","dependencies","factory","_ref","typed","config","Complex","number","x","predictable","log2Number","_log2Complex","BigNumber","isNegative","log","toNumber","referToSelf","self","deepMap","newX","Math","sqrt","re","im","log2","LN2","atan2"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/log2.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLog2 = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nvar createLog2 = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return (0, _index.log2Number)(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self);\n      };\n    })\n  });\n\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n});\nexports.createLog2 = createLog2;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,WAAW,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACtD,IAAIE,MAAM,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AACnD,IAAIG,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,IAAIN,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACM,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,OAAO,GAAGH,IAAI,CAACG,OAAO;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOF,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIH,MAAM,CAACI,WAAW,EAAE;QAChC,OAAO,CAAC,CAAC,EAAEV,MAAM,CAACW,UAAU,EAAEF,CAAC,CAAC;MAClC,CAAC,MAAM;QACL;QACA,OAAOG,YAAY,CAAC,IAAIL,OAAO,CAACE,CAAC,EAAE,CAAC,CAAC,CAAC;MACxC;IACF,CAAC;IACDF,OAAO,EAAEK,YAAY;IACrBC,SAAS,EAAE,SAASA,SAAS,CAACJ,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACK,UAAU,EAAE,IAAIR,MAAM,CAACI,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACM,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACL;QACA,OAAOH,YAAY,CAAC,IAAIL,OAAO,CAACE,CAAC,CAACO,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;MACnD;IACF,CAAC;IACD,gBAAgB,EAAEX,KAAK,CAACY,WAAW,CAAC,UAAUC,IAAI,EAAE;MAClD,OAAO,UAAUT,CAAC,EAAE;QAClB,OAAO,CAAC,CAAC,EAAEV,WAAW,CAACoB,OAAO,EAAEV,CAAC,EAAES,IAAI,CAAC;MAC1C,CAAC;IACH,CAAC;EACH,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASN,YAAY,CAACH,CAAC,EAAE;IACvB,IAAIW,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACb,CAAC,CAACc,EAAE,GAAGd,CAAC,CAACc,EAAE,GAAGd,CAAC,CAACe,EAAE,GAAGf,CAAC,CAACe,EAAE,CAAC;IAC/C,OAAO,IAAIjB,OAAO,CAACc,IAAI,CAACI,IAAI,GAAGJ,IAAI,CAACI,IAAI,CAACL,IAAI,CAAC,GAAGC,IAAI,CAACN,GAAG,CAACK,IAAI,CAAC,GAAGC,IAAI,CAACK,GAAG,EAAEL,IAAI,CAACM,KAAK,CAAClB,CAAC,CAACe,EAAE,EAAEf,CAAC,CAACc,EAAE,CAAC,GAAGF,IAAI,CAACK,GAAG,CAAC;EAChH;AACF,CAAC,CAAC;AACFhC,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script"}