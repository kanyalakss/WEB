{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTo = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nvar createTo = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    }\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});\nexports.createTo = createTo;","map":{"version":3,"names":["Object","defineProperty","exports","value","createTo","_factory","require","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","matrixAlgorithmSuite","createMatrixAlgorithmSuite","UnitUnitString","x","unit","to","Ds"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/unit/to.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTo = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nvar createTo = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix;\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n  return typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    }\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});\nexports.createTo = createTo;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,iDAAiD,CAAC;AACtF,IAAIE,IAAI,GAAG,IAAI;AACf,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AACtC,IAAIL,QAAQ,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACK,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACtF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;EACtB,IAAIC,oBAAoB,GAAG,CAAC,CAAC,EAAEP,qBAAqB,CAACQ,0BAA0B,EAAE;IAC/EH,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA;EACV,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAACJ,IAAI,EAAE;IACjB,qBAAqB,EAAE,SAASQ,cAAc,CAACC,CAAC,EAAEC,IAAI,EAAE;MACtD,OAAOD,CAAC,CAACE,EAAE,CAACD,IAAI,CAAC;IACnB;EACF,CAAC,EAAEJ,oBAAoB,CAAC;IACtBM,EAAE,EAAE;EACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFlB,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script"}