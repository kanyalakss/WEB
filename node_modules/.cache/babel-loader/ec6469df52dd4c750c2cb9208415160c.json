{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gammaG = void 0;\nexports.gammaNumber = gammaNumber;\nexports.lgammaN = exports.lgammaG = exports.gammaP = void 0;\nexports.lgammaNumber = lgammaNumber;\nexports.lnSqrt2PI = exports.lgammaSeries = void 0;\nvar _number = require(\"../../utils/number.js\");\nvar _product = require(\"../../utils/product.js\");\n/* eslint-disable no-loss-of-precision */\n\nfunction gammaNumber(n) {\n  var x;\n  if ((0, _number.isInteger)(n)) {\n    if (n <= 0) {\n      return isFinite(n) ? Infinity : NaN;\n    }\n    if (n > 171) {\n      return Infinity; // Will overflow\n    }\n\n    return (0, _product.product)(1, n - 1);\n  }\n  if (n < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));\n  }\n  if (n >= 171.35) {\n    return Infinity; // will overflow\n  }\n\n  if (n > 85.0) {\n    // Extended Stirling Approx\n    var twoN = n * n;\n    var threeN = twoN * n;\n    var fourN = threeN * n;\n    var fiveN = fourN * n;\n    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));\n  }\n  --n;\n  x = gammaP[0];\n  for (var i = 1; i < gammaP.length; ++i) {\n    x += gammaP[i] / (n + i);\n  }\n  var t = n + gammaG + 0.5;\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n}\ngammaNumber.signature = 'number';\n\n// TODO: comment on the variables g and p\n\nvar gammaG = 4.7421875;\nexports.gammaG = gammaG;\nvar gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];\n\n// lgamma implementation ref: https://mrob.com/pub/ries/lanczos-gamma.html#code\n\n// log(2 * pi) / 2\nexports.gammaP = gammaP;\nvar lnSqrt2PI = 0.91893853320467274178;\nexports.lnSqrt2PI = lnSqrt2PI;\nvar lgammaG = 5; // Lanczos parameter \"g\"\nexports.lgammaG = lgammaG;\nvar lgammaN = 7; // Range of coefficients \"n\"\nexports.lgammaN = lgammaN;\nvar lgammaSeries = [1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\nexports.lgammaSeries = lgammaSeries;\nfunction lgammaNumber(n) {\n  if (n < 0) return NaN;\n  if (n === 0) return Infinity;\n  if (!isFinite(n)) return n;\n  if (n < 0.5) {\n    // Use Euler's reflection formula:\n    // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))\n    return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);\n  }\n\n  // Compute the logarithm of the Gamma function using the Lanczos method\n\n  n = n - 1;\n  var base = n + lgammaG + 0.5; // Base of the Lanczos exponential\n  var sum = lgammaSeries[0];\n\n  // We start with the terms that have the smallest coefficients and largest denominator\n  for (var i = lgammaN - 1; i >= 1; i--) {\n    sum += lgammaSeries[i] / (n + i);\n  }\n  return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);\n}\nlgammaNumber.signature = 'number';","map":{"version":3,"names":["Object","defineProperty","exports","value","gammaG","gammaNumber","lgammaN","lgammaG","gammaP","lgammaNumber","lnSqrt2PI","lgammaSeries","_number","require","_product","n","x","isInteger","isFinite","Infinity","NaN","product","Math","PI","sin","twoN","threeN","fourN","fiveN","sqrt","pow","E","i","length","t","exp","signature","log","base","sum"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/plain/number/probability.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gammaG = void 0;\nexports.gammaNumber = gammaNumber;\nexports.lgammaN = exports.lgammaG = exports.gammaP = void 0;\nexports.lgammaNumber = lgammaNumber;\nexports.lnSqrt2PI = exports.lgammaSeries = void 0;\nvar _number = require(\"../../utils/number.js\");\nvar _product = require(\"../../utils/product.js\");\n/* eslint-disable no-loss-of-precision */\n\nfunction gammaNumber(n) {\n  var x;\n  if ((0, _number.isInteger)(n)) {\n    if (n <= 0) {\n      return isFinite(n) ? Infinity : NaN;\n    }\n    if (n > 171) {\n      return Infinity; // Will overflow\n    }\n\n    return (0, _product.product)(1, n - 1);\n  }\n  if (n < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));\n  }\n  if (n >= 171.35) {\n    return Infinity; // will overflow\n  }\n\n  if (n > 85.0) {\n    // Extended Stirling Approx\n    var twoN = n * n;\n    var threeN = twoN * n;\n    var fourN = threeN * n;\n    var fiveN = fourN * n;\n    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));\n  }\n  --n;\n  x = gammaP[0];\n  for (var i = 1; i < gammaP.length; ++i) {\n    x += gammaP[i] / (n + i);\n  }\n  var t = n + gammaG + 0.5;\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n}\ngammaNumber.signature = 'number';\n\n// TODO: comment on the variables g and p\n\nvar gammaG = 4.7421875;\nexports.gammaG = gammaG;\nvar gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];\n\n// lgamma implementation ref: https://mrob.com/pub/ries/lanczos-gamma.html#code\n\n// log(2 * pi) / 2\nexports.gammaP = gammaP;\nvar lnSqrt2PI = 0.91893853320467274178;\nexports.lnSqrt2PI = lnSqrt2PI;\nvar lgammaG = 5; // Lanczos parameter \"g\"\nexports.lgammaG = lgammaG;\nvar lgammaN = 7; // Range of coefficients \"n\"\nexports.lgammaN = lgammaN;\nvar lgammaSeries = [1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];\nexports.lgammaSeries = lgammaSeries;\nfunction lgammaNumber(n) {\n  if (n < 0) return NaN;\n  if (n === 0) return Infinity;\n  if (!isFinite(n)) return n;\n  if (n < 0.5) {\n    // Use Euler's reflection formula:\n    // gamma(z) = PI / (sin(PI * z) * gamma(1 - z))\n    return Math.log(Math.PI / Math.sin(Math.PI * n)) - lgammaNumber(1 - n);\n  }\n\n  // Compute the logarithm of the Gamma function using the Lanczos method\n\n  n = n - 1;\n  var base = n + lgammaG + 0.5; // Base of the Lanczos exponential\n  var sum = lgammaSeries[0];\n\n  // We start with the terms that have the smallest coefficients and largest denominator\n  for (var i = lgammaN - 1; i >= 1; i--) {\n    sum += lgammaSeries[i] / (n + i);\n  }\n  return lnSqrt2PI + (n + 0.5) * Math.log(base) - base + Math.log(sum);\n}\nlgammaNumber.signature = 'number';"],"mappings":"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"},"metadata":{},"sourceType":"script"}