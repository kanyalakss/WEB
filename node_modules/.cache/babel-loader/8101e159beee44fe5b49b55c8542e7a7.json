{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMod = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createMod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': _index.modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createMod = createMod;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMod","_factory","require","_matAlgo02xDS","_matAlgo03xDSf","_matAlgo05xSfSf","_matAlgo11xS0s","_matAlgo12xSfs","_index","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","equalScalar","DenseMatrix","matAlgo02xDS0","createMatAlgo02xDS0","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo05xSfSf","createMatAlgo05xSfSf","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","modNumber","BigNumberBigNumber","x","y","isNeg","Error","isZero","mod","FractionFraction","compare","add","SS","DS","SD","Ss","sS"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/mod.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMod = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo02xDS = require(\"../../type/matrix/utils/matAlgo02xDS0.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nvar createMod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo02xDS0 = (0, _matAlgo02xDS.createMatAlgo02xDS0)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n  return typed(name, {\n    'number, number': _index.modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});\nexports.createMod = createMod;"],"mappings":"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"},"metadata":{},"sourceType":"script"}