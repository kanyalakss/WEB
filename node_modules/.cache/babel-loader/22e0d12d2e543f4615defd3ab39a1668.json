{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFft = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nvar createFft = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    exp = _ref.exp,\n    tau = _ref.tau,\n    I = _ref.i;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = (0, _array.arraySize)(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(function (slice) {\n      return _ndFft(slice, size.slice(1));\n    }), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = (0, _array.arraySize)(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map(function (_, i) {\n      return _1dFft(arr[i], dim - 1);\n    });\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = (0, _array.arraySize)(arr);\n      return new Array(size[1]).fill(0).map(function (_, j) {\n        return new Array(size[0]).fill(0).map(function (_, i) {\n          return arr[i][j];\n        });\n      });\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [].concat((0, _toConsumableArray2[\"default\"])(_fft(arr.filter(function (_, i) {\n        return i % 2 === 0;\n      }), len / 2)), (0, _toConsumableArray2[\"default\"])(_fft(arr.filter(function (_, i) {\n        return i % 2 === 1;\n      }), len / 2)));\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    }\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});\nexports.createFft = createFft;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createFft","_toConsumableArray2","_array","_factory","name","dependencies","factory","_ref","typed","matrix","addScalar","multiplyScalar","divideScalar","exp","tau","I","i","Array","_ndFft","Matrix","create","toArray","arr","size","arraySize","length","_fft","_1dFft","map","slice","dim","fill","_","_transpose","j","len","ret","concat","filter","k","p","q","Error"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/fft.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFft = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _array = require(\"../../utils/array.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'fft';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'divideScalar', 'exp', 'tau', 'i'];\nvar createFft = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    exp = _ref.exp,\n    tau = _ref.tau,\n    I = _ref.i;\n  /**\n   * Calculate N-dimensional fourier transform\n   *\n   * Syntax:\n   *\n   *     math.fft(arr)\n   *\n   * Examples:\n   *\n   *    math.fft([[1, 0], [1, 0]]) // returns [[{re:2, im:0}, {re:2, im:0}], [{re:0, im:0}, {re:0, im:0}]]\n   *\n   *\n   * See Also:\n   *\n   *      ifft\n   *\n   * @param {Array | Matrix} arr    An array or matrix\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\n   */\n  return typed(name, {\n    Array: _ndFft,\n    Matrix: function Matrix(matrix) {\n      return matrix.create(_ndFft(matrix.toArray()));\n    }\n  });\n\n  /**\n   * Perform an N-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _ndFft(arr) {\n    var size = (0, _array.arraySize)(arr);\n    if (size.length === 1) return _fft(arr, size[0]);\n    // ndFft along dimension 1,...,N-1 then 1dFft along dimension 0\n    return _1dFft(arr.map(function (slice) {\n      return _ndFft(slice, size.slice(1));\n    }), 0);\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @param {number} dim     dimension of the array to perform on\n   * @return {Array}         resulting array\n   */\n  function _1dFft(arr, dim) {\n    var size = (0, _array.arraySize)(arr);\n    if (dim !== 0) return new Array(size[0]).fill(0).map(function (_, i) {\n      return _1dFft(arr[i], dim - 1);\n    });\n    if (size.length === 1) return _fft(arr);\n    function _transpose(arr) {\n      // Swap first 2 dimensions\n      var size = (0, _array.arraySize)(arr);\n      return new Array(size[1]).fill(0).map(function (_, j) {\n        return new Array(size[0]).fill(0).map(function (_, i) {\n          return arr[i][j];\n        });\n      });\n    }\n    return _transpose(_1dFft(_transpose(arr), 1));\n  }\n\n  /**\n   * Perform an 1-dimensional Fourier transform\n   *\n   * @param {Array} arr      The array\n   * @return {Array}         resulting array\n   */\n  function _fft(arr) {\n    var len = arr.length;\n    if (len === 1) return [arr[0]];\n    if (len % 2 === 0) {\n      var ret = [].concat((0, _toConsumableArray2[\"default\"])(_fft(arr.filter(function (_, i) {\n        return i % 2 === 0;\n      }), len / 2)), (0, _toConsumableArray2[\"default\"])(_fft(arr.filter(function (_, i) {\n        return i % 2 === 1;\n      }), len / 2)));\n      for (var k = 0; k < len / 2; k++) {\n        var p = ret[k];\n        var q = multiplyScalar(ret[k + len / 2], exp(multiplyScalar(multiplyScalar(tau, I), divideScalar(-k, len))));\n        ret[k] = addScalar(p, q);\n        ret[k + len / 2] = addScalar(p, multiplyScalar(-1, q));\n      }\n      return ret;\n    }\n    throw new Error('Can only calculate FFT of power-of-two size');\n  }\n});\nexports.createFft = createFft;"],"mappings":"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"},"metadata":{},"sourceType":"script"}