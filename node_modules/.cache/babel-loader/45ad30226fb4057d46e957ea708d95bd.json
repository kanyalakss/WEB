{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInvmod = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nvar createInvmod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    BigNumber = _ref.BigNumber,\n    xgcd = _ref.xgcd,\n    equal = _ref.equal,\n    smaller = _ref.smaller,\n    mod = _ref.mod,\n    add = _ref.add,\n    isInteger = _ref.isInteger;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var _res = res,\n      _res2 = (0, _slicedToArray2[\"default\"])(_res, 2),\n      gcd = _res2[0],\n      inv = _res2[1];\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});\nexports.createInvmod = createInvmod;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createInvmod","_slicedToArray2","_factory","name","dependencies","factory","_ref","typed","config","BigNumber","xgcd","equal","smaller","mod","add","isInteger","invmod","a","b","Error","res","valueOf","_res","_res2","gcd","inv","NaN"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/invmod.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInvmod = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'invmod';\nvar dependencies = ['typed', 'config', 'BigNumber', 'xgcd', 'equal', 'smaller', 'mod', 'add', 'isInteger'];\nvar createInvmod = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    BigNumber = _ref.BigNumber,\n    xgcd = _ref.xgcd,\n    equal = _ref.equal,\n    smaller = _ref.smaller,\n    mod = _ref.mod,\n    add = _ref.add,\n    isInteger = _ref.isInteger;\n  /**\n   * Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation `ax ≣ 1 (mod b)`\n   * See https://en.wikipedia.org/wiki/Modular_multiplicative_inverse.\n   *\n   * Syntax:\n   *\n   *    math.invmod(a, b)\n   *\n   * Examples:\n   *\n   *    math.invmod(8, 12)             // returns NaN\n   *    math.invmod(7, 13)             // returns 2\n   *    math.invmod(15151, 15122)      // returns 10429\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {number | BigNumber} a  An integer number\n   * @param {number | BigNumber} b  An integer number\n   * @return {number | BigNumber }  Returns an integer number\n   *                              where `invmod(a,b)*a ≣ 1 (mod b)`\n   */\n  return typed(name, {\n    'number, number': invmod,\n    'BigNumber, BigNumber': invmod\n  });\n  function invmod(a, b) {\n    if (!isInteger(a) || !isInteger(b)) throw new Error('Parameters in function invmod must be integer numbers');\n    a = mod(a, b);\n    if (equal(b, 0)) throw new Error('Divisor must be non zero');\n    var res = xgcd(a, b);\n    res = res.valueOf();\n    var _res = res,\n      _res2 = (0, _slicedToArray2[\"default\"])(_res, 2),\n      gcd = _res2[0],\n      inv = _res2[1];\n    if (!equal(gcd, BigNumber(1))) return NaN;\n    inv = mod(inv, b);\n    if (smaller(inv, BigNumber(0))) inv = add(inv, b);\n    return inv;\n  }\n});\nexports.createInvmod = createInvmod;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AACpFC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAIC,eAAe,GAAGP,sBAAsB,CAACC,OAAO,CAAC,sCAAsC,CAAC,CAAC;AAC7F,IAAIO,QAAQ,GAAGP,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIQ,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC;AAC1G,IAAIJ,YAAY,GAAG,eAAe,CAAC,CAAC,EAAEE,QAAQ,CAACG,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC1F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,SAAS,GAAGH,IAAI,CAACG,SAAS;IAC1BC,IAAI,GAAGJ,IAAI,CAACI,IAAI;IAChBC,KAAK,GAAGL,IAAI,CAACK,KAAK;IAClBC,OAAO,GAAGN,IAAI,CAACM,OAAO;IACtBC,GAAG,GAAGP,IAAI,CAACO,GAAG;IACdC,GAAG,GAAGR,IAAI,CAACQ,GAAG;IACdC,SAAS,GAAGT,IAAI,CAACS,SAAS;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOR,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAEa,MAAM;IACxB,sBAAsB,EAAEA;EAC1B,CAAC,CAAC;EACF,SAASA,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAI,CAACH,SAAS,CAACE,CAAC,CAAC,IAAI,CAACF,SAAS,CAACG,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAC5GF,CAAC,GAAGJ,GAAG,CAACI,CAAC,EAAEC,CAAC,CAAC;IACb,IAAIP,KAAK,CAACO,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC5D,IAAIC,GAAG,GAAGV,IAAI,CAACO,CAAC,EAAEC,CAAC,CAAC;IACpBE,GAAG,GAAGA,GAAG,CAACC,OAAO,EAAE;IACnB,IAAIC,IAAI,GAAGF,GAAG;MACZG,KAAK,GAAG,CAAC,CAAC,EAAEtB,eAAe,CAAC,SAAS,CAAC,EAAEqB,IAAI,EAAE,CAAC,CAAC;MAChDE,GAAG,GAAGD,KAAK,CAAC,CAAC,CAAC;MACdE,GAAG,GAAGF,KAAK,CAAC,CAAC,CAAC;IAChB,IAAI,CAACZ,KAAK,CAACa,GAAG,EAAEf,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,OAAOiB,GAAG;IACzCD,GAAG,GAAGZ,GAAG,CAACY,GAAG,EAAEP,CAAC,CAAC;IACjB,IAAIN,OAAO,CAACa,GAAG,EAAEhB,SAAS,CAAC,CAAC,CAAC,CAAC,EAAEgB,GAAG,GAAGX,GAAG,CAACW,GAAG,EAAEP,CAAC,CAAC;IACjD,OAAOO,GAAG;EACZ;AACF,CAAC,CAAC;AACF3B,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script"}