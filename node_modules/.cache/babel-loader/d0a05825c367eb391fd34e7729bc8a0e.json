{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLgamma = void 0;\nvar _index = require(\"../../plain/number/index.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _number = require(\"../../utils/number.js\");\n/* eslint-disable no-loss-of-precision */\n\n// References\n// ----------\n// [1] Hare, \"Computing the Principal Branch of log-Gamma\", Journal of Algorithms, 1997.\n// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments\n\nvar name = 'lgamma';\nvar dependencies = ['Complex', 'typed'];\nvar createLgamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Complex = _ref.Complex,\n    typed = _ref.typed;\n  // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get\n  // sufficient accuracy.\n  //\n  // These two values are copied from Scipy implementation:\n  // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37\n  var SMALL_RE = 7;\n  var SMALL_IM = 7;\n\n  /**\n   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].\n   *\n   * If you cannot access the paper, can also get these values from the formula in [2].\n   *\n   *    1 /     12 = 0.00833333333333333333333333333333\n   *    1 /    360 = 0.00277777777777777777777777777778\n   * ...\n   * 3617 / 133400 = 0.02955065359477124183006535947712\n   */\n  var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];\n\n  /**\n   * Logarithm of the gamma function for real, positive numbers and complex numbers,\n   * using Lanczos approximation for numbers and Stirling series for complex numbers.\n   *\n   * Syntax:\n   *\n   *    math.lgamma(n)\n   *\n   * Examples:\n   *\n   *    math.lgamma(5)       // returns 3.178053830347945\n   *    math.lgamma(0)       // returns Infinity\n   *    math.lgamma(-0.5)    // returns NaN\n   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i\n   *\n   * See also:\n   *\n   *    gamma\n   *\n   * @param {number | Complex} n   A real or complex number\n   * @return {number | Complex}    The log gamma of `n`\n   */\n  return typed(name, {\n    number: _index.lgammaNumber,\n    Complex: lgammaComplex,\n    BigNumber: function BigNumber() {\n      throw new Error(\"mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber\");\n    }\n  });\n  function lgammaComplex(n) {\n    var TWOPI = 6.2831853071795864769252842; // 2*pi\n    var LOGPI = 1.1447298858494001741434262; // log(pi)\n\n    var REFLECTION = 0.1;\n    if (n.isNaN()) {\n      return new Complex(NaN, NaN);\n    } else if (n.im === 0) {\n      return new Complex((0, _index.lgammaNumber)(n.re), 0);\n    } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {\n      return lgammaStirling(n);\n    } else if (n.re <= REFLECTION) {\n      // Reflection formula. see Proposition 3.1 in [1]\n      var tmp = (0, _number.copysign)(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);\n      var a = n.mul(Math.PI).sin().log();\n      var b = lgammaComplex(new Complex(1 - n.re, -n.im));\n      return new Complex(LOGPI, tmp).sub(a).sub(b);\n    } else if (n.im >= 0) {\n      return lgammaRecurrence(n);\n    } else {\n      return lgammaRecurrence(n.conjugate()).conjugate();\n    }\n  }\n  function lgammaStirling(z) {\n    // formula ref in [2]\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101\n\n    // left part\n\n    // x (log(x) - 1) + 1/2 (log(2PI) - log(x))\n    // => (x - 0.5) * log(x) - x + log(2PI) / 2\n    var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(_index.lnSqrt2PI);\n\n    // right part\n\n    var rz = new Complex(1, 0).div(z);\n    var rzz = rz.div(z);\n    var a = coeffs[0];\n    var b = coeffs[1];\n    var r = 2 * rzz.re;\n    var s = rzz.re * rzz.re + rzz.im * rzz.im;\n    for (var i = 2; i < 8; i++) {\n      var tmp = b;\n      b = -s * a + coeffs[i];\n      a = r * a + tmp;\n    }\n    var rightPart = rz.mul(rzz.mul(a).add(b));\n\n    // plus left and right\n\n    return leftPart.add(rightPart);\n  }\n  function lgammaRecurrence(z) {\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78\n\n    var signflips = 0;\n    var sb = 0;\n    var shiftprod = z;\n    z = z.add(1);\n    while (z.re <= SMALL_RE) {\n      shiftprod = shiftprod.mul(z);\n      var nsb = shiftprod.im < 0 ? 1 : 0;\n      if (nsb !== 0 && sb === 0) signflips++;\n      sb = nsb;\n      z = z.add(1);\n    }\n    return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));\n  }\n});\nexports.createLgamma = createLgamma;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLgamma","_index","require","_factory","_number","name","dependencies","factory","_ref","Complex","typed","SMALL_RE","SMALL_IM","coeffs","number","lgammaNumber","lgammaComplex","BigNumber","Error","n","TWOPI","LOGPI","REFLECTION","isNaN","NaN","im","re","Math","abs","lgammaStirling","tmp","copysign","floor","a","mul","PI","sin","log","b","sub","lgammaRecurrence","conjugate","z","leftPart","add","lnSqrt2PI","rz","div","rzz","r","s","i","rightPart","signflips","sb","shiftprod","nsb"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/probability/lgamma.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLgamma = void 0;\nvar _index = require(\"../../plain/number/index.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _number = require(\"../../utils/number.js\");\n/* eslint-disable no-loss-of-precision */\n\n// References\n// ----------\n// [1] Hare, \"Computing the Principal Branch of log-Gamma\", Journal of Algorithms, 1997.\n// [2] https://math.stackexchange.com/questions/1338753/how-do-i-calculate-values-for-gamma-function-with-complex-arguments\n\nvar name = 'lgamma';\nvar dependencies = ['Complex', 'typed'];\nvar createLgamma = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var Complex = _ref.Complex,\n    typed = _ref.typed;\n  // Stirling series is non-convergent, we need to use the recurrence `lgamma(z) = lgamma(z+1) - log z` to get\n  // sufficient accuracy.\n  //\n  // These two values are copied from Scipy implementation:\n  // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L37\n  var SMALL_RE = 7;\n  var SMALL_IM = 7;\n\n  /**\n   * The coefficients are B[2*n]/(2*n*(2*n - 1)) where B[2*n] is the (2*n)th Bernoulli number. See (1.1) in [1].\n   *\n   * If you cannot access the paper, can also get these values from the formula in [2].\n   *\n   *    1 /     12 = 0.00833333333333333333333333333333\n   *    1 /    360 = 0.00277777777777777777777777777778\n   * ...\n   * 3617 / 133400 = 0.02955065359477124183006535947712\n   */\n  var coeffs = [-2.955065359477124183e-2, 6.4102564102564102564e-3, -1.9175269175269175269e-3, 8.4175084175084175084e-4, -5.952380952380952381e-4, 7.9365079365079365079e-4, -2.7777777777777777778e-3, 8.3333333333333333333e-2];\n\n  /**\n   * Logarithm of the gamma function for real, positive numbers and complex numbers,\n   * using Lanczos approximation for numbers and Stirling series for complex numbers.\n   *\n   * Syntax:\n   *\n   *    math.lgamma(n)\n   *\n   * Examples:\n   *\n   *    math.lgamma(5)       // returns 3.178053830347945\n   *    math.lgamma(0)       // returns Infinity\n   *    math.lgamma(-0.5)    // returns NaN\n   *    math.lgamma(math.i)  // returns -0.6509231993018536 - 1.8724366472624294i\n   *\n   * See also:\n   *\n   *    gamma\n   *\n   * @param {number | Complex} n   A real or complex number\n   * @return {number | Complex}    The log gamma of `n`\n   */\n  return typed(name, {\n    number: _index.lgammaNumber,\n    Complex: lgammaComplex,\n    BigNumber: function BigNumber() {\n      throw new Error(\"mathjs doesn't yet provide an implementation of the algorithm lgamma for BigNumber\");\n    }\n  });\n  function lgammaComplex(n) {\n    var TWOPI = 6.2831853071795864769252842; // 2*pi\n    var LOGPI = 1.1447298858494001741434262; // log(pi)\n\n    var REFLECTION = 0.1;\n    if (n.isNaN()) {\n      return new Complex(NaN, NaN);\n    } else if (n.im === 0) {\n      return new Complex((0, _index.lgammaNumber)(n.re), 0);\n    } else if (n.re >= SMALL_RE || Math.abs(n.im) >= SMALL_IM) {\n      return lgammaStirling(n);\n    } else if (n.re <= REFLECTION) {\n      // Reflection formula. see Proposition 3.1 in [1]\n      var tmp = (0, _number.copysign)(TWOPI, n.im) * Math.floor(0.5 * n.re + 0.25);\n      var a = n.mul(Math.PI).sin().log();\n      var b = lgammaComplex(new Complex(1 - n.re, -n.im));\n      return new Complex(LOGPI, tmp).sub(a).sub(b);\n    } else if (n.im >= 0) {\n      return lgammaRecurrence(n);\n    } else {\n      return lgammaRecurrence(n.conjugate()).conjugate();\n    }\n  }\n  function lgammaStirling(z) {\n    // formula ref in [2]\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L101\n\n    // left part\n\n    // x (log(x) - 1) + 1/2 (log(2PI) - log(x))\n    // => (x - 0.5) * log(x) - x + log(2PI) / 2\n    var leftPart = z.sub(0.5).mul(z.log()).sub(z).add(_index.lnSqrt2PI);\n\n    // right part\n\n    var rz = new Complex(1, 0).div(z);\n    var rzz = rz.div(z);\n    var a = coeffs[0];\n    var b = coeffs[1];\n    var r = 2 * rzz.re;\n    var s = rzz.re * rzz.re + rzz.im * rzz.im;\n    for (var i = 2; i < 8; i++) {\n      var tmp = b;\n      b = -s * a + coeffs[i];\n      a = r * a + tmp;\n    }\n    var rightPart = rz.mul(rzz.mul(a).add(b));\n\n    // plus left and right\n\n    return leftPart.add(rightPart);\n  }\n  function lgammaRecurrence(z) {\n    // computation ref:\n    // https://github.com/scipy/scipy/blob/v1.8.0/scipy/special/_loggamma.pxd#L78\n\n    var signflips = 0;\n    var sb = 0;\n    var shiftprod = z;\n    z = z.add(1);\n    while (z.re <= SMALL_RE) {\n      shiftprod = shiftprod.mul(z);\n      var nsb = shiftprod.im < 0 ? 1 : 0;\n      if (nsb !== 0 && sb === 0) signflips++;\n      sb = nsb;\n      z = z.add(1);\n    }\n    return lgammaStirling(z).sub(shiftprod.log()).sub(new Complex(0, signflips * 2 * Math.PI * 1));\n  }\n});\nexports.createLgamma = createLgamma;"],"mappings":"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"},"metadata":{},"sourceType":"script"}