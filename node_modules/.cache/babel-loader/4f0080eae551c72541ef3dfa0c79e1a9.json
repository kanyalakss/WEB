{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPartitionSelect = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nvar createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    isNumeric = _ref.isNumeric,\n    isNaN = _ref.isNaN,\n    compare = _ref.compare;\n  var asc = compare;\n  var desc = function desc(a, b) {\n    return -compare(a, b);\n  };\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n  function _partitionSelect(x, k, compare) {\n    if (!(0, _number.isInteger)(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n    if ((0, _is.isMatrix)(x)) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    // check for NaN values since these can cause an infinite while loop\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n    return arr[k];\n  }\n});\nexports.createPartitionSelect = createPartitionSelect;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPartitionSelect","_is","require","_number","_factory","name","dependencies","factory","_ref","typed","isNumeric","isNaN","compare","asc","desc","a","b","ArrayMatrixNumber","x","k","_partitionSelect","ArrayMatrixNumberString","Error","isInteger","isMatrix","size","length","quickSelect","valueOf","Array","isArray","arr","i","from","to","r","w","pivot","Math","floor","random","tmp"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/matrix/partitionSelect.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPartitionSelect = void 0;\nvar _is = require(\"../../utils/is.js\");\nvar _number = require(\"../../utils/number.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'partitionSelect';\nvar dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];\nvar createPartitionSelect = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    isNumeric = _ref.isNumeric,\n    isNaN = _ref.isNaN,\n    compare = _ref.compare;\n  var asc = compare;\n  var desc = function desc(a, b) {\n    return -compare(a, b);\n  };\n\n  /**\n   * Partition-based selection of an array or 1D matrix.\n   * Will find the kth smallest value, and mutates the input array.\n   * Uses Quickselect.\n   *\n   * Syntax:\n   *\n   *    math.partitionSelect(x, k)\n   *    math.partitionSelect(x, k, compare)\n   *\n   * Examples:\n   *\n   *    math.partitionSelect([5, 10, 1], 2)           // returns 10\n   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'\n   *\n   *    function sortByLength (a, b) {\n   *      return a.length - b.length\n   *    }\n   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'\n   *\n   * See also:\n   *\n   *    sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to sort\n   * @param {Number} k            The kth smallest value to be retrieved zero-based index\n   * @param {Function | 'asc' | 'desc'} [compare='asc']\n   *        An optional comparator function. The function is called as\n   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,\n   *        and 0 when a == b.\n   * @return {*} Returns the kth lowest value.\n   */\n  return typed(name, {\n    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {\n      return _partitionSelect(x, k, asc);\n    },\n    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {\n      if (compare === 'asc') {\n        return _partitionSelect(x, k, asc);\n      } else if (compare === 'desc') {\n        return _partitionSelect(x, k, desc);\n      } else {\n        throw new Error('Compare string must be \"asc\" or \"desc\"');\n      }\n    },\n    'Array | Matrix, number, function': _partitionSelect\n  });\n  function _partitionSelect(x, k, compare) {\n    if (!(0, _number.isInteger)(k) || k < 0) {\n      throw new Error('k must be a non-negative integer');\n    }\n    if ((0, _is.isMatrix)(x)) {\n      var size = x.size();\n      if (size.length > 1) {\n        throw new Error('Only one dimensional matrices supported');\n      }\n      return quickSelect(x.valueOf(), k, compare);\n    }\n    if (Array.isArray(x)) {\n      return quickSelect(x, k, compare);\n    }\n  }\n\n  /**\n   * Quickselect algorithm.\n   * Code adapted from:\n   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html\n   *\n   * @param {Array} arr\n   * @param {Number} k\n   * @param {Function} compare\n   * @private\n   */\n  function quickSelect(arr, k, compare) {\n    if (k >= arr.length) {\n      throw new Error('k out of bounds');\n    }\n\n    // check for NaN values since these can cause an infinite while loop\n    for (var i = 0; i < arr.length; i++) {\n      if (isNumeric(arr[i]) && isNaN(arr[i])) {\n        return arr[i]; // return NaN\n      }\n    }\n\n    var from = 0;\n    var to = arr.length - 1;\n\n    // if from == to we reached the kth element\n    while (from < to) {\n      var r = from;\n      var w = to;\n      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];\n\n      // stop if the reader and writer meets\n      while (r < w) {\n        // arr[r] >= pivot\n        if (compare(arr[r], pivot) >= 0) {\n          // put the large values at the end\n          var tmp = arr[w];\n          arr[w] = arr[r];\n          arr[r] = tmp;\n          --w;\n        } else {\n          // the value is smaller than the pivot, skip\n          ++r;\n        }\n      }\n\n      // if we stepped up (r++) we need to step one down (arr[r] > pivot)\n      if (compare(arr[r], pivot) > 0) {\n        --r;\n      }\n\n      // the r pointer is on the end of the first k elements\n      if (k <= r) {\n        to = r;\n      } else {\n        from = r + 1;\n      }\n    }\n    return arr[k];\n  }\n});\nexports.createPartitionSelect = createPartitionSelect;"],"mappings":"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"},"metadata":{},"sourceType":"script"}