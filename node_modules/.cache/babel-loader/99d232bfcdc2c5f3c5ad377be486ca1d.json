{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubtract = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nvar createSubtract = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    addScalar = _ref.addScalar,\n    unaryMinus = _ref.unaryMinus,\n    DenseMatrix = _ref.DenseMatrix;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (x.value === null) {\n          throw new Error('Parameter x contains a unit with undefined value');\n        }\n        if (y.value === null) {\n          throw new Error('Parameter y contains a unit with undefined value');\n        }\n        if (!x.equalBase(y)) {\n          throw new Error('Units do not match');\n        }\n        var res = x.clone();\n        res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n        res.fixPrefix = false;\n        return res;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});\nexports.createSubtract = createSubtract;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSubtract","_factory","require","_matAlgo01xDSid","_matAlgo03xDSf","_matAlgo05xSfSf","_matAlgo10xSids","_matAlgo12xSfs","_matrixAlgorithmSuite","name","dependencies","factory","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo05xSfSf","createMatAlgo05xSfSf","matAlgo10xSids","createMatAlgo10xSids","matAlgo12xSfs","createMatAlgo12xSfs","matrixAlgorithmSuite","createMatrixAlgorithmSuite","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","referToSelf","self","Error","equalBase","res","clone","find","valueType","fixPrefix","SS","DS","SD","Ss","sS"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/subtract.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSubtract = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _matAlgo01xDSid = require(\"../../type/matrix/utils/matAlgo01xDSid.js\");\nvar _matAlgo03xDSf = require(\"../../type/matrix/utils/matAlgo03xDSf.js\");\nvar _matAlgo05xSfSf = require(\"../../type/matrix/utils/matAlgo05xSfSf.js\");\nvar _matAlgo10xSids = require(\"../../type/matrix/utils/matAlgo10xSids.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matrixAlgorithmSuite = require(\"../../type/matrix/utils/matrixAlgorithmSuite.js\");\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nvar createSubtract = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    addScalar = _ref.addScalar,\n    unaryMinus = _ref.unaryMinus,\n    DenseMatrix = _ref.DenseMatrix;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = (0, _matAlgo01xDSid.createMatAlgo01xDSid)({\n    typed: typed\n  });\n  var matAlgo03xDSf = (0, _matAlgo03xDSf.createMatAlgo03xDSf)({\n    typed: typed\n  });\n  var matAlgo05xSfSf = (0, _matAlgo05xSfSf.createMatAlgo05xSfSf)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = (0, _matAlgo10xSids.createMatAlgo10xSids)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = (0, _matrixAlgorithmSuite.createMatrixAlgorithmSuite)({\n    typed: typed,\n    matrix: matrix\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        if (x.value === null) {\n          throw new Error('Parameter x contains a unit with undefined value');\n        }\n        if (y.value === null) {\n          throw new Error('Parameter y contains a unit with undefined value');\n        }\n        if (!x.equalBase(y)) {\n          throw new Error('Units do not match');\n        }\n        var res = x.clone();\n        res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n        res.fixPrefix = false;\n        return res;\n      };\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});\nexports.createSubtract = createSubtract;"],"mappings":"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"},"metadata":{},"sourceType":"script"}