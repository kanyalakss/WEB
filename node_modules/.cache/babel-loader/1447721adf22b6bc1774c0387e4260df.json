{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRound = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nvar createRound = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    zeros = _ref.zeros,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: _index.roundNumber,\n    'number, number': _index.roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self, true);\n      };\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'Array, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo12xSfs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo14xDs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n      };\n    })\n  });\n});\nexports.createRound = createRound;","map":{"version":3,"names":["Object","defineProperty","exports","value","createRound","_factory","require","_collection","_matAlgo11xS0s","_matAlgo12xSfs","_matAlgo14xDs","_index","NO_INT","name","dependencies","factory","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo12xSfs","createMatAlgo12xSfs","matAlgo14xDs","createMatAlgo14xDs","number","roundNumber","numberBigNumber","x","n","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","ComplexNumber","ComplexBigNumber","_n","BigNumberBigNumber","Fraction","FractionNumber","FractionBigNumber","referToSelf","self","deepMap","y","valueOf","size","storage"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/round.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRound = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _collection = require(\"../../utils/collection.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo12xSfs = require(\"../../type/matrix/utils/matAlgo12xSfs.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar _index = require(\"../../plain/number/index.js\");\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nvar createRound = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    zeros = _ref.zeros,\n    BigNumber = _ref.BigNumber,\n    DenseMatrix = _ref.DenseMatrix;\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = (0, _matAlgo12xSfs.createMatAlgo12xSfs)({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed(name, {\n    number: _index.roundNumber,\n    'number, number': _index.roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      var _n = n.toNumber();\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return (0, _collection.deepMap)(x, self, true);\n      };\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'Array, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo12xSfs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n        return matAlgo14xDs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n      };\n    })\n  });\n});\nexports.createRound = createRound;"],"mappings":"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"},"metadata":{},"sourceType":"script"}