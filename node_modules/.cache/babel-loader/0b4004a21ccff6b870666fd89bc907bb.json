{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cbrt = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = void 0;\nexports.copysign = copysign;\nexports.cosh = void 0;\nexports.digits = digits;\nexports.expm1 = void 0;\nexports.format = format;\nexports.isInteger = isInteger;\nexports.log2 = exports.log1p = exports.log10 = void 0;\nexports.nearlyEqual = nearlyEqual;\nexports.roundDigits = roundDigits;\nexports.sinh = exports.sign = void 0;\nexports.splitNumber = splitNumber;\nexports.tanh = void 0;\nexports.toEngineering = toEngineering;\nexports.toExponential = toExponential;\nexports.toFixed = toFixed;\nexports.toPrecision = toPrecision;\nvar _is = require(\"./is.js\");\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nfunction isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\nvar sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexports.sign = sign;\nvar log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexports.log2 = log2;\nvar log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\nexports.log10 = log10;\nvar log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\nexports.log1p = log1p;\nvar cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\nexports.cbrt = cbrt;\nvar expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nexports.expm1 = expm1;\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n    if (n < 0) {\n      n = n + Math.pow(2, size);\n    }\n    suffix = \"i\".concat(size);\n  }\n  var sign = '';\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nfunction format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if ((0, _is.isNumber)(options)) {\n      precision = options;\n    } else if ((0, _is.isNumber)(options.precision)) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nfunction splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nfunction toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if ((0, _is.isNumber)(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  }\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  }\n\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\nfunction toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nfunction toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\nfunction toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nfunction roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nfunction digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nvar DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexports.DBL_EPSILON = DBL_EPSILON;\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n  if (x === y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\nvar acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexports.acosh = acosh;\nvar asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\nexports.asinh = asinh;\nvar atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\nexports.atanh = atanh;\nvar cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\nexports.cosh = cosh;\nvar sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\nexports.sinh = sinh;\nvar tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexports.tanh = tanh;\nfunction copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","cbrt","atanh","asinh","acosh","DBL_EPSILON","copysign","cosh","digits","expm1","format","isInteger","log2","log1p","log10","nearlyEqual","roundDigits","sinh","sign","splitNumber","tanh","toEngineering","toExponential","toFixed","toPrecision","_is","require","isFinite","Math","round","x","log","LN2","LN10","negate","result","exp","formatNumberToBase","n","base","size","prefixes","prefix","suffix","Error","pow","concat","toString","options","Infinity","isNaN","notation","precision","wordSize","isNumber","replace","arguments","e","match","String","toLowerCase","SyntaxError","exponent","parseFloat","dot","indexOf","length","coefficients","zeros","split","map","d","parseInt","push","rounded","c","newExp","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","str","splitValue","p","pp","splice","first","shift","lowerExp","undefined","upperExp","unshift","removed","pop","arr","Number","EPSILON","y","epsilon","diff","max","sqrt","signx","signy"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/utils/number.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cbrt = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = void 0;\nexports.copysign = copysign;\nexports.cosh = void 0;\nexports.digits = digits;\nexports.expm1 = void 0;\nexports.format = format;\nexports.isInteger = isInteger;\nexports.log2 = exports.log1p = exports.log10 = void 0;\nexports.nearlyEqual = nearlyEqual;\nexports.roundDigits = roundDigits;\nexports.sinh = exports.sign = void 0;\nexports.splitNumber = splitNumber;\nexports.tanh = void 0;\nexports.toEngineering = toEngineering;\nexports.toExponential = toExponential;\nexports.toFixed = toFixed;\nexports.toPrecision = toPrecision;\nvar _is = require(\"./is.js\");\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nfunction isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\nvar sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexports.sign = sign;\nvar log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexports.log2 = log2;\nvar log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\nexports.log10 = log10;\nvar log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\nexports.log1p = log1p;\nvar cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\nexports.cbrt = cbrt;\nvar expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nexports.expm1 = expm1;\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n > Math.pow(2, size - 1) - 1 || n < -Math.pow(2, size - 1)) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n    if (n < 0) {\n      n = n + Math.pow(2, size);\n    }\n    suffix = \"i\".concat(size);\n  }\n  var sign = '';\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nfunction format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if ((0, _is.isNumber)(options)) {\n      precision = options;\n    } else if ((0, _is.isNumber)(options.precision)) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nfunction splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nfunction toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if ((0, _is.isNumber)(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  }\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  }\n\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\nfunction toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nfunction toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\nfunction toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nfunction roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nfunction digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nvar DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexports.DBL_EPSILON = DBL_EPSILON;\nfunction nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n  if (x === y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\nvar acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexports.acosh = acosh;\nvar asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\nexports.asinh = asinh;\nvar atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\nexports.atanh = atanh;\nvar cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\nexports.cosh = cosh;\nvar sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\nexports.sinh = sinh;\nvar tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexports.tanh = tanh;\nfunction copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}"],"mappings":"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CAAC,EAAE;MAC/D,MAAM,IAAII,KAAK,CAAC,6BAA6B,CAACE,MAAM,CAACN,IAAI,GAAG,CAAC,EAAE,MAAM,CAAC,CAACM,MAAM,CAACN,IAAI,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IACjG;IACA,IAAI,CAAC7B,SAAS,CAAC2B,CAAC,CAAC,EAAE;MACjB,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,IAAIN,CAAC,GAAG,CAAC,EAAE;MACTA,CAAC,GAAGA,CAAC,GAAGV,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEL,IAAI,CAAC;IAC3B;IACAG,MAAM,GAAG,GAAG,CAACG,MAAM,CAACN,IAAI,CAAC;EAC3B;EACA,IAAItB,IAAI,GAAG,EAAE;EACb,IAAIoB,CAAC,GAAG,CAAC,EAAE;IACTA,CAAC,GAAG,CAACA,CAAC;IACNpB,IAAI,GAAG,GAAG;EACZ;EACA,OAAO,EAAE,CAAC4B,MAAM,CAAC5B,IAAI,CAAC,CAAC4B,MAAM,CAACJ,MAAM,CAAC,CAACI,MAAM,CAACR,CAAC,CAACS,QAAQ,CAACR,IAAI,CAAC,CAAC,CAACO,MAAM,CAACH,MAAM,CAAC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASjC,MAAM,CAACV,KAAK,EAAEgD,OAAO,EAAE;EAC9B,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;IACjC;IACA,OAAOA,OAAO,CAA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"},"metadata":{},"sourceType":"script"}