{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMatAlgo07xSSf = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'DenseMatrix'];\nvar createMatAlgo07xSSf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n\n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});\nexports.createMatAlgo07xSSf = createMatAlgo07xSSf;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMatAlgo07xSSf","_factory","require","_DimensionError","name","dependencies","factory","_ref","typed","DenseMatrix","matAlgo07xSSf","a","b","callback","asize","_size","adt","_datatype","bsize","bdt","length","DimensionError","RangeError","rows","columns","dt","zero","cf","convert","find","i","j","cdata","xa","xb","wa","wb","mark","_scatter","va","vb","data","size","datatype","m","w","x","values","_values","index","_index","ptr","_ptr","k","k1"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/type/matrix/utils/matAlgo07xSSf.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMatAlgo07xSSf = void 0;\nvar _factory = require(\"../../../utils/factory.js\");\nvar _DimensionError = require(\"../../../error/DimensionError.js\");\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'DenseMatrix'];\nvar createMatAlgo07xSSf = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new _DimensionError.DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n\n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});\nexports.createMatAlgo07xSSf = createMatAlgo07xSSf;"],"mappings":"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"},"metadata":{},"sourceType":"script"}