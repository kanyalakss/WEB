{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLeafCount = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nvar createLeafCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n    typed = _ref.typed;\n  // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(function (n) {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n  return typed(name, {\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});\nexports.createLeafCount = createLeafCount;","map":{"version":3,"names":["Object","defineProperty","exports","value","createLeafCount","_factory","require","name","dependencies","factory","_ref","parse","typed","countLeaves","node","count","forEach","n","Node","expr"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/algebra/leafCount.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLeafCount = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'leafCount';\nvar dependencies = ['parse', 'typed'];\nvar createLeafCount = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n    typed = _ref.typed;\n  // This does the real work, but we don't have to recurse through\n  // a typed call if we separate it out\n  function countLeaves(node) {\n    var count = 0;\n    node.forEach(function (n) {\n      count += countLeaves(n);\n    });\n    return count || 1;\n  }\n\n  /**\n   * Gives the number of \"leaf nodes\" in the parse tree of the given expression\n   * A leaf node is one that has no subexpressions, essentially either a\n   * symbol or a constant. Note that `5!` has just one leaf, the '5'; the\n   * unary factorial operator does not add a leaf. On the other hand,\n   * function symbols do add leaves, so `sin(x)/cos(x)` has four leaves.\n   *\n   * The `simplify()` function should generally not increase the `leafCount()`\n   * of an expression, although currently there is no guarantee that it never\n   * does so. In many cases, `simplify()` reduces the leaf count.\n   *\n   * Syntax:\n   *\n   *     leafCount(expr)\n   *\n   * Examples:\n   *\n   *     math.leafCount('x') // 1\n   *     math.leafCount(math.parse('a*d-b*c')) // 4\n   *     math.leafCount('[a,b;c,d][0,1]') // 6\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param {Node|string} expr    The expression to count the leaves of\n   *\n   * @return {number}  The number of leaves of `expr`\n   *\n   */\n  return typed(name, {\n    Node: function Node(expr) {\n      return countLeaves(expr);\n    }\n  });\n});\nexports.createLeafCount = createLeafCount;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;AACrC,IAAIJ,eAAe,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC7F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACpB;EACA;EACA,SAASC,WAAW,CAACC,IAAI,EAAE;IACzB,IAAIC,KAAK,GAAG,CAAC;IACbD,IAAI,CAACE,OAAO,CAAC,UAAUC,CAAC,EAAE;MACxBF,KAAK,IAAIF,WAAW,CAACI,CAAC,CAAC;IACzB,CAAC,CAAC;IACF,OAAOF,KAAK,IAAI,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACL,IAAI,EAAE;IACjBW,IAAI,EAAE,SAASA,IAAI,CAACC,IAAI,EAAE;MACxB,OAAON,WAAW,CAACM,IAAI,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACFjB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}