{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSpaClass = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nvar createSpaClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var addScalar = _ref.addScalar,\n    equalScalar = _ref.equalScalar,\n    FibonacciHeap = _ref.FibonacciHeap;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});\nexports.createSpaClass = createSpaClass;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSpaClass","_factory","require","name","dependencies","factory","_ref","addScalar","equalScalar","FibonacciHeap","Spa","SyntaxError","_values","_heap","prototype","type","isSpa","set","i","v","node","insert","get","accumulate","forEach","from","to","callback","heap","values","nodes","extractMinimum","push","key","length","n","swap","j","nodei","nodej","remove","undefined","isClass"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/type/matrix/Spa.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSpaClass = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nvar createSpaClass = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var addScalar = _ref.addScalar,\n    equalScalar = _ref.equalScalar,\n    FibonacciHeap = _ref.FibonacciHeap;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});\nexports.createSpaClass = createSpaClass;"],"mappings":"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"},"metadata":{},"sourceType":"script"}