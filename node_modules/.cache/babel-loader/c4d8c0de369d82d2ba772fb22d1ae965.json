{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrt = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nvar createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n    typed = _ref.typed,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, if you want the matrix square root of a square matrix,\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\n   * a matrix M, use `math.map(M, math.sqrt)`.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});\nexports.createSqrt = createSqrt;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSqrt","_factory","require","name","dependencies","factory","_ref","config","typed","Complex","number","_sqrtNumber","x","sqrt","BigNumber","isNegative","predictable","toNumber","Unit","pow","isNaN","NaN","Math"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/sqrt.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSqrt = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nvar createSqrt = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var config = _ref.config,\n    typed = _ref.typed,\n    Complex = _ref.Complex;\n  /**\n   * Calculate the square root of a value.\n   *\n   * For matrices, if you want the matrix square root of a square matrix,\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\n   * a matrix M, use `math.map(M, math.sqrt)`.\n   *\n   * Syntax:\n   *\n   *    math.sqrt(x)\n   *\n   * Examples:\n   *\n   *    math.sqrt(25)                // returns 5\n   *    math.square(5)               // returns 25\n   *    math.sqrt(-4)                // returns Complex 2i\n   *\n   * See also:\n   *\n   *    square, multiply, cube, cbrt, sqrtm\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the square root.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the square root of `x`\n   */\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n\n  /**\n   * Calculate sqrt for a number\n   * @param {number} x\n   * @returns {number | Complex} Returns the square root of x\n   * @private\n   */\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});\nexports.createSqrt = createSqrt;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC;AACjD,IAAIJ,UAAU,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACI,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACtBC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAClBC,OAAO,GAAGH,IAAI,CAACG,OAAO;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOD,KAAK,CAAC,MAAM,EAAE;IACnBE,MAAM,EAAEC,WAAW;IACnBF,OAAO,EAAE,SAASA,OAAO,CAACG,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,IAAI,EAAE;IACjB,CAAC;IACDC,SAAS,EAAE,SAASA,SAAS,CAACF,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACG,UAAU,EAAE,IAAIR,MAAM,CAACS,WAAW,EAAE;QACzC,OAAOJ,CAAC,CAACC,IAAI,EAAE;MACjB,CAAC,MAAM;QACL;QACA,OAAOF,WAAW,CAACC,CAAC,CAACK,QAAQ,EAAE,CAAC;MAClC;IACF,CAAC;IACDC,IAAI,EAAE,SAASA,IAAI,CAACN,CAAC,EAAE;MACrB;MACA,OAAOA,CAAC,CAACO,GAAG,CAAC,GAAG,CAAC;IACnB;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,SAASR,WAAW,CAACC,CAAC,EAAE;IACtB,IAAIQ,KAAK,CAACR,CAAC,CAAC,EAAE;MACZ,OAAOS,GAAG;IACZ,CAAC,MAAM,IAAIT,CAAC,IAAI,CAAC,IAAIL,MAAM,CAACS,WAAW,EAAE;MACvC,OAAOM,IAAI,CAACT,IAAI,CAACD,CAAC,CAAC;IACrB,CAAC,MAAM;MACL,OAAO,IAAIH,OAAO,CAACG,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,EAAE;IACjC;EACF;AACF,CAAC,CAAC;AACFf,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script"}