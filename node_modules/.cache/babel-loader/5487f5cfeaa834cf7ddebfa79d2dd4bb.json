{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivide = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nvar createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    multiply = _ref.multiply,\n    equalScalar = _ref.equalScalar,\n    divideScalar = _ref.divideScalar,\n    inv = _ref.inv;\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  return typed('divide', (0, _object.extend)({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});\nexports.createDivide = createDivide;","map":{"version":3,"names":["Object","defineProperty","exports","value","createDivide","_factory","require","_object","_matAlgo11xS0s","_matAlgo14xDs","name","dependencies","factory","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","matAlgo11xS0s","createMatAlgo11xS0s","matAlgo14xDs","createMatAlgo14xDs","extend","ArrayMatrixArrayMatrix","x","y","DenseMatrixAny","SparseMatrixAny","ArrayAny","valueOf","anyArrayMatrix","signatures"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/function/arithmetic/divide.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDivide = void 0;\nvar _factory = require(\"../../utils/factory.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _matAlgo11xS0s = require(\"../../type/matrix/utils/matAlgo11xS0s.js\");\nvar _matAlgo14xDs = require(\"../../type/matrix/utils/matAlgo14xDs.js\");\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nvar createDivide = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    multiply = _ref.multiply,\n    equalScalar = _ref.equalScalar,\n    divideScalar = _ref.divideScalar,\n    inv = _ref.inv;\n  var matAlgo11xS0s = (0, _matAlgo11xS0s.createMatAlgo11xS0s)({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = (0, _matAlgo14xDs.createMatAlgo14xDs)({\n    typed: typed\n  });\n\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n  return typed('divide', (0, _object.extend)({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});\nexports.createDivide = createDivide;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAIC,QAAQ,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC9C,IAAIE,cAAc,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AACxE,IAAIG,aAAa,GAAGH,OAAO,CAAC,yCAAyC,CAAC;AACtE,IAAII,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,KAAK,CAAC;AACxF,IAAIP,YAAY,GAAG,eAAe,CAAC,CAAC,EAAEC,QAAQ,CAACO,OAAO,EAAEF,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC1F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACpBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IACxBC,WAAW,GAAGJ,IAAI,CAACI,WAAW;IAC9BC,YAAY,GAAGL,IAAI,CAACK,YAAY;IAChCC,GAAG,GAAGN,IAAI,CAACM,GAAG;EAChB,IAAIC,aAAa,GAAG,CAAC,CAAC,EAAEZ,cAAc,CAACa,mBAAmB,EAAE;IAC1DP,KAAK,EAAEA,KAAK;IACZG,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIK,YAAY,GAAG,CAAC,CAAC,EAAEb,aAAa,CAACc,kBAAkB,EAAE;IACvDT,KAAK,EAAEA;EACT,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAEP,OAAO,CAACiB,MAAM,EAAE;IACzC;;IAEA,gCAAgC,EAAE,SAASC,sBAAsB,CAACC,CAAC,EAAEC,CAAC,EAAE;MACtE;MACA;MACA;MACA;MACA,OAAOX,QAAQ,CAACU,CAAC,EAAEP,GAAG,CAACQ,CAAC,CAAC,CAAC;IAC5B,CAAC;IACD,kBAAkB,EAAE,SAASC,cAAc,CAACF,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOL,YAAY,CAACI,CAAC,EAAEC,CAAC,EAAET,YAAY,EAAE,KAAK,CAAC;IAChD,CAAC;IACD,mBAAmB,EAAE,SAASW,eAAe,CAACH,CAAC,EAAEC,CAAC,EAAE;MAClD,OAAOP,aAAa,CAACM,CAAC,EAAEC,CAAC,EAAET,YAAY,EAAE,KAAK,CAAC;IACjD,CAAC;IACD,YAAY,EAAE,SAASY,QAAQ,CAACJ,CAAC,EAAEC,CAAC,EAAE;MACpC;MACA,OAAOL,YAAY,CAACP,MAAM,CAACW,CAAC,CAAC,EAAEC,CAAC,EAAET,YAAY,EAAE,KAAK,CAAC,CAACa,OAAO,EAAE;IAClE,CAAC;IACD,qBAAqB,EAAE,SAASC,cAAc,CAACN,CAAC,EAAEC,CAAC,EAAE;MACnD,OAAOX,QAAQ,CAACU,CAAC,EAAEP,GAAG,CAACQ,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC,EAAET,YAAY,CAACe,UAAU,CAAC,CAAC;AAC9B,CAAC,CAAC;AACF/B,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script"}