{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFunctionNode = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _scope = require(\"../../utils/scope.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _latex = require(\"../../utils/latex.js\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nvar createFunctionNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var math = _ref.math,\n    Node = _ref.Node,\n    SymbolNode = _ref.SymbolNode;\n  /* format to fixed length */\n  var strin = function strin(entity) {\n    return (0, _string.format)(entity, {\n      truncate: 78\n    });\n  };\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch ((0, _typeof2[\"default\"])(property)) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if ((0, _is.isNode)(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if ((0, _is.isNode)(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if ((0, _is.isNode)(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  var FunctionNode = /*#__PURE__*/function (_Node) {\n    (0, _inherits2[\"default\"])(FunctionNode, _Node);\n    var _super = _createSuper(FunctionNode);\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    function FunctionNode(fn, args) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, FunctionNode);\n      _this = _super.call(this);\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!(0, _is.isNode)(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(_is.isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    }\n\n    // readonly property name\n    (0, _createClass2[\"default\"])(FunctionNode, [{\n      key: \"name\",\n      get: function get() {\n        return this.fn.name || '';\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isFunctionNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // compile arguments\n        var evalArgs = this.args.map(function (arg) {\n          return arg._compile(math, argNames);\n        });\n        if ((0, _is.isSymbolNode)(this.fn)) {\n          var _name = this.fn.name;\n          if (!argNames[_name]) {\n            // we can statically determine whether the function\n            // has the rawArgs property\n            var fn = _name in math ? (0, _customs.getSafeProperty)(math, _name) : undefined;\n            var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n            var resolveFn = function resolveFn(scope) {\n              var value;\n              if (scope.has(_name)) {\n                value = scope.get(_name);\n              } else if (_name in math) {\n                value = (0, _customs.getSafeProperty)(math, _name);\n              } else {\n                return FunctionNode.onUndefinedFunction(_name);\n              }\n              if (typeof value === 'function') {\n                return value;\n              }\n              throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n            };\n            if (isRaw) {\n              // pass unevaluated parameters (nodes) to the function\n              // \"raw\" evaluation\n              var rawArgs = this.args;\n              return function evalFunctionNode(scope, args, context) {\n                var fn = resolveFn(scope);\n                return fn(rawArgs, math, (0, _scope.createSubScope)(scope, args), scope);\n              };\n            } else {\n              // \"regular\" evaluation\n              switch (evalArgs.length) {\n                case 0:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    return fn();\n                  };\n                case 1:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    return fn(evalArg0(scope, args, context));\n                  };\n                case 2:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    var evalArg1 = evalArgs[1];\n                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                  };\n                default:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var values = evalArgs.map(function (evalArg) {\n                      return evalArg(scope, args, context);\n                    });\n                    return fn.apply(void 0, (0, _toConsumableArray2[\"default\"])(values));\n                  };\n              }\n            }\n          } else {\n            // the function symbol is an argName\n            var _rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = args[_name];\n              if (typeof fn !== 'function') {\n                throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n              }\n              if (fn.rawArgs) {\n                // \"Raw\" evaluation\n                return fn(_rawArgs, math, (0, _scope.createSubScope)(scope, args), scope);\n              } else {\n                var values = evalArgs.map(function (evalArg) {\n                  return evalArg(scope, args, context);\n                });\n                return fn.apply(fn, values);\n              }\n            };\n          }\n        } else if ((0, _is.isAccessorNode)(this.fn) && (0, _is.isIndexNode)(this.fn.index) && this.fn.index.isObjectProperty()) {\n          // execute the function with the right context:\n          // the object of the AccessorNode\n\n          var evalObject = this.fn.object._compile(math, argNames);\n          var prop = this.fn.index.getObjectProperty();\n          var _rawArgs2 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            (0, _customs.validateSafeMethod)(object, prop);\n            var isRaw = object[prop] && object[prop].rawArgs;\n            if (isRaw) {\n              // \"Raw\" evaluation\n              return object[prop](_rawArgs2, math, (0, _scope.createSubScope)(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return object[prop].apply(object, values);\n            }\n          };\n        } else {\n          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n          // we have to dynamically determine whether the function has the\n          // rawArgs property\n          var fnExpr = this.fn.toString();\n          var evalFn = this.fn._compile(math, argNames);\n          var _rawArgs3 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = evalFn(scope, args, context);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs3, math, (0, _scope.createSubScope)(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.fn, 'fn', this);\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n\n      /**\n       * Create a new FunctionNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {FunctionNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var fn = this._ifNode(callback(this.fn, 'fn', this));\n        var args = [];\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n        return new FunctionNode(fn, args);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {FunctionNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new FunctionNode(this.fn, this.args.slice(0));\n      }\n\n      /**\n       * Throws an error 'Undefined function {name}'\n       * @param {string} name\n       */\n    }, {\n      key: \"toString\",\n      value:\n      /**\n       * Get string representation. (wrapper function)\n       * This overrides parts of Node's toString function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toString\n       * function.\n       *\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toString(options) {\n        var customString;\n        var name = this.fn.toString(options);\n        if (options && (0, _typeof2[\"default\"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, name)) {\n          // callback is a map of callback functions\n          customString = options.handler[name](this, options);\n        }\n        if (typeof customString !== 'undefined') {\n          return customString;\n        }\n\n        // fall back to Node's toString\n        return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(FunctionNode.prototype), \"toString\", this).call(this, options);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toString(options);\n        });\n        var fn = (0, _is.isFunctionAssignmentNode)(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n        // format the arguments like \"add(2, 4.2)\"\n        return fn + '(' + args.join(', ') + ')';\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          fn: this.fn,\n          args: this.args\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n       *                       where mathjs is optional\n       * @returns {FunctionNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toHTML(options);\n        });\n\n        // format the arguments like \"add(2, 4.2)\"\n        return '<span class=\"math-function\">' + (0, _string.escape)(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n\n      /**\n       * Get LaTeX representation. (wrapper function)\n       * This overrides parts of Node's toTex function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toTex\n       * function.\n       *\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"toTex\",\n      value: function toTex(options) {\n        var customTex;\n        if (options && (0, _typeof2[\"default\"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, this.name)) {\n          // callback is a map of callback functions\n          customTex = options.handler[this.name](this, options);\n        }\n        if (typeof customTex !== 'undefined') {\n          return customTex;\n        }\n\n        // fall back to Node's toTex\n        return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(FunctionNode.prototype), \"toTex\", this).call(this, options);\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var args = this.args.map(function (arg) {\n          // get LaTeX of the arguments\n          return arg.toTex(options);\n        });\n        var latexConverter;\n        if (_latex.latexFunctions[this.name]) {\n          latexConverter = _latex.latexFunctions[this.name];\n        }\n\n        // toTex property on the function itself\n        if (math[this.name] && (typeof math[this.name].toTex === 'function' || (0, _typeof2[\"default\"])(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n          // .toTex is a callback function\n          latexConverter = math[this.name].toTex;\n        }\n        var customToTex;\n        switch ((0, _typeof2[\"default\"])(latexConverter)) {\n          case 'function':\n            // a callback function\n            customToTex = latexConverter(this, options);\n            break;\n          case 'string':\n            // a template string\n            customToTex = expandTemplate(latexConverter, this, options);\n            break;\n          case 'object':\n            // an object with different \"converters\" for different\n            // numbers of arguments\n            switch ((0, _typeof2[\"default\"])(latexConverter[args.length])) {\n              case 'function':\n                customToTex = latexConverter[args.length](this, options);\n                break;\n              case 'string':\n                customToTex = expandTemplate(latexConverter[args.length], this, options);\n                break;\n            }\n        }\n        if (typeof customToTex !== 'undefined') {\n          return customToTex;\n        }\n        return expandTemplate(_latex.defaultTemplate, this, options);\n      }\n\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.name;\n      }\n    }]);\n    return FunctionNode;\n  }(Node);\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"name\", name);\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createFunctionNode = createFunctionNode;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","createFunctionNode","_toConsumableArray2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_typeof2","_is","_string","_object","_customs","_scope","_factory","_latex","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","name","dependencies","factory","_ref","math","Node","SymbolNode","strin","entity","format","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","isNode","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","_Node","_super","fn","args","_this","every","key","get","_compile","argNames","evalArgs","isSymbolNode","_name","getSafeProperty","isRaw","rawArgs","resolveFn","scope","has","onUndefinedFunction","concat","evalFunctionNode","context","createSubScope","evalArg0","evalArg1","values","evalArg","_rawArgs","isAccessorNode","isIndexNode","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","validateSafeMethod","fnExpr","toString","evalFn","_rawArgs3","forEach","callback","i","_ifNode","clone","customString","handler","hasOwnProperty","_toString","isFunctionAssignmentNode","toJSON","mathjs","toHTML","escape","customTex","_toTex","latexConverter","latexFunctions","customToTex","defaultTemplate","getIdentifier","type","Error","json","isClass"],"sources":["C:/Users/Admin/Desktop/React-Web-main/node_modules/mathjs/lib/cjs/expression/node/FunctionNode.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFunctionNode = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _is = require(\"../../utils/is.js\");\nvar _string = require(\"../../utils/string.js\");\nvar _object = require(\"../../utils/object.js\");\nvar _customs = require(\"../../utils/customs.js\");\nvar _scope = require(\"../../utils/scope.js\");\nvar _factory = require(\"../../utils/factory.js\");\nvar _latex = require(\"../../utils/latex.js\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nvar createFunctionNode = /* #__PURE__ */(0, _factory.factory)(name, dependencies, function (_ref) {\n  var math = _ref.math,\n    Node = _ref.Node,\n    SymbolNode = _ref.SymbolNode;\n  /* format to fixed length */\n  var strin = function strin(entity) {\n    return (0, _string.format)(entity, {\n      truncate: 78\n    });\n  };\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch ((0, _typeof2[\"default\"])(property)) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if ((0, _is.isNode)(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if ((0, _is.isNode)(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if ((0, _is.isNode)(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  var FunctionNode = /*#__PURE__*/function (_Node) {\n    (0, _inherits2[\"default\"])(FunctionNode, _Node);\n    var _super = _createSuper(FunctionNode);\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    function FunctionNode(fn, args) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, FunctionNode);\n      _this = _super.call(this);\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!(0, _is.isNode)(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(_is.isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    }\n\n    // readonly property name\n    (0, _createClass2[\"default\"])(FunctionNode, [{\n      key: \"name\",\n      get: function get() {\n        return this.fn.name || '';\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isFunctionNode\",\n      get: function get() {\n        return true;\n      }\n\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // compile arguments\n        var evalArgs = this.args.map(function (arg) {\n          return arg._compile(math, argNames);\n        });\n        if ((0, _is.isSymbolNode)(this.fn)) {\n          var _name = this.fn.name;\n          if (!argNames[_name]) {\n            // we can statically determine whether the function\n            // has the rawArgs property\n            var fn = _name in math ? (0, _customs.getSafeProperty)(math, _name) : undefined;\n            var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n            var resolveFn = function resolveFn(scope) {\n              var value;\n              if (scope.has(_name)) {\n                value = scope.get(_name);\n              } else if (_name in math) {\n                value = (0, _customs.getSafeProperty)(math, _name);\n              } else {\n                return FunctionNode.onUndefinedFunction(_name);\n              }\n              if (typeof value === 'function') {\n                return value;\n              }\n              throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n            };\n            if (isRaw) {\n              // pass unevaluated parameters (nodes) to the function\n              // \"raw\" evaluation\n              var rawArgs = this.args;\n              return function evalFunctionNode(scope, args, context) {\n                var fn = resolveFn(scope);\n                return fn(rawArgs, math, (0, _scope.createSubScope)(scope, args), scope);\n              };\n            } else {\n              // \"regular\" evaluation\n              switch (evalArgs.length) {\n                case 0:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    return fn();\n                  };\n                case 1:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    return fn(evalArg0(scope, args, context));\n                  };\n                case 2:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    var evalArg1 = evalArgs[1];\n                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                  };\n                default:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var values = evalArgs.map(function (evalArg) {\n                      return evalArg(scope, args, context);\n                    });\n                    return fn.apply(void 0, (0, _toConsumableArray2[\"default\"])(values));\n                  };\n              }\n            }\n          } else {\n            // the function symbol is an argName\n            var _rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = args[_name];\n              if (typeof fn !== 'function') {\n                throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n              }\n              if (fn.rawArgs) {\n                // \"Raw\" evaluation\n                return fn(_rawArgs, math, (0, _scope.createSubScope)(scope, args), scope);\n              } else {\n                var values = evalArgs.map(function (evalArg) {\n                  return evalArg(scope, args, context);\n                });\n                return fn.apply(fn, values);\n              }\n            };\n          }\n        } else if ((0, _is.isAccessorNode)(this.fn) && (0, _is.isIndexNode)(this.fn.index) && this.fn.index.isObjectProperty()) {\n          // execute the function with the right context:\n          // the object of the AccessorNode\n\n          var evalObject = this.fn.object._compile(math, argNames);\n          var prop = this.fn.index.getObjectProperty();\n          var _rawArgs2 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            (0, _customs.validateSafeMethod)(object, prop);\n            var isRaw = object[prop] && object[prop].rawArgs;\n            if (isRaw) {\n              // \"Raw\" evaluation\n              return object[prop](_rawArgs2, math, (0, _scope.createSubScope)(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return object[prop].apply(object, values);\n            }\n          };\n        } else {\n          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n          // we have to dynamically determine whether the function has the\n          // rawArgs property\n          var fnExpr = this.fn.toString();\n          var evalFn = this.fn._compile(math, argNames);\n          var _rawArgs3 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = evalFn(scope, args, context);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs3, math, (0, _scope.createSubScope)(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      }\n\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.fn, 'fn', this);\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n\n      /**\n       * Create a new FunctionNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {FunctionNode} Returns a transformed copy of the node\n       */\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var fn = this._ifNode(callback(this.fn, 'fn', this));\n        var args = [];\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n        return new FunctionNode(fn, args);\n      }\n\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {FunctionNode}\n       */\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new FunctionNode(this.fn, this.args.slice(0));\n      }\n\n      /**\n       * Throws an error 'Undefined function {name}'\n       * @param {string} name\n       */\n    }, {\n      key: \"toString\",\n      value:\n      /**\n       * Get string representation. (wrapper function)\n       * This overrides parts of Node's toString function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toString\n       * function.\n       *\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toString(options) {\n        var customString;\n        var name = this.fn.toString(options);\n        if (options && (0, _typeof2[\"default\"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, name)) {\n          // callback is a map of callback functions\n          customString = options.handler[name](this, options);\n        }\n        if (typeof customString !== 'undefined') {\n          return customString;\n        }\n\n        // fall back to Node's toString\n        return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(FunctionNode.prototype), \"toString\", this).call(this, options);\n      }\n\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toString(options);\n        });\n        var fn = (0, _is.isFunctionAssignmentNode)(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n        // format the arguments like \"add(2, 4.2)\"\n        return fn + '(' + args.join(', ') + ')';\n      }\n\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          fn: this.fn,\n          args: this.args\n        };\n      }\n\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n       *                       where mathjs is optional\n       * @returns {FunctionNode}\n       */\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toHTML(options);\n        });\n\n        // format the arguments like \"add(2, 4.2)\"\n        return '<span class=\"math-function\">' + (0, _string.escape)(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n\n      /**\n       * Get LaTeX representation. (wrapper function)\n       * This overrides parts of Node's toTex function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toTex\n       * function.\n       *\n       * @param {Object} options\n       * @return {string}\n       */\n    }, {\n      key: \"toTex\",\n      value: function toTex(options) {\n        var customTex;\n        if (options && (0, _typeof2[\"default\"])(options.handler) === 'object' && (0, _object.hasOwnProperty)(options.handler, this.name)) {\n          // callback is a map of callback functions\n          customTex = options.handler[this.name](this, options);\n        }\n        if (typeof customTex !== 'undefined') {\n          return customTex;\n        }\n\n        // fall back to Node's toTex\n        return (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(FunctionNode.prototype), \"toTex\", this).call(this, options);\n      }\n\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var args = this.args.map(function (arg) {\n          // get LaTeX of the arguments\n          return arg.toTex(options);\n        });\n        var latexConverter;\n        if (_latex.latexFunctions[this.name]) {\n          latexConverter = _latex.latexFunctions[this.name];\n        }\n\n        // toTex property on the function itself\n        if (math[this.name] && (typeof math[this.name].toTex === 'function' || (0, _typeof2[\"default\"])(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n          // .toTex is a callback function\n          latexConverter = math[this.name].toTex;\n        }\n        var customToTex;\n        switch ((0, _typeof2[\"default\"])(latexConverter)) {\n          case 'function':\n            // a callback function\n            customToTex = latexConverter(this, options);\n            break;\n          case 'string':\n            // a template string\n            customToTex = expandTemplate(latexConverter, this, options);\n            break;\n          case 'object':\n            // an object with different \"converters\" for different\n            // numbers of arguments\n            switch ((0, _typeof2[\"default\"])(latexConverter[args.length])) {\n              case 'function':\n                customToTex = latexConverter[args.length](this, options);\n                break;\n              case 'string':\n                customToTex = expandTemplate(latexConverter[args.length], this, options);\n                break;\n            }\n        }\n        if (typeof customToTex !== 'undefined') {\n          return customToTex;\n        }\n        return expandTemplate(_latex.defaultTemplate, this, options);\n      }\n\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.name;\n      }\n    }]);\n    return FunctionNode;\n  }(Node);\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"name\", name);\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  (0, _defineProperty2[\"default\"])(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});\nexports.createFunctionNode = createFunctionNode;"],"mappings":"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"},"metadata":{},"sourceType":"script"}